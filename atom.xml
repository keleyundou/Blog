<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ColaBean&#39;s Blog</title>
  
  <subtitle>苟有恒何必三更睡五更起，最无益莫过一日曝十日寒。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://keleyundou.github.io/"/>
  <updated>2018-12-13T14:10:50.213Z</updated>
  <id>http://keleyundou.github.io/</id>
  
  <author>
    <name>ColaBean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>策略模式</title>
    <link href="http://keleyundou.github.io/2018/12/strategy-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/strategy-pattern/</id>
    <published>2018-12-13T14:09:06.000Z</published>
    <updated>2018-12-13T14:10:50.213Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/strategy-pattern/StrategyPattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/strategy-pattern/StrategyPattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="行为型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://keleyundou.github.io/2018/12/prototype-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/prototype-pattern/</id>
    <published>2018-12-13T14:06:52.000Z</published>
    <updated>2018-12-13T14:10:54.036Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/prototype-pattern/PrototypePattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/prototype-pattern/PrototypePattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="创建型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="http://keleyundou.github.io/2018/12/composite-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/composite-pattern/</id>
    <published>2018-12-13T14:04:23.000Z</published>
    <updated>2018-12-13T14:06:29.400Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/composite-pattern/CompositePattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/composite-pattern/CompositePattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="结构型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="http://keleyundou.github.io/2018/12/builder-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/builder-pattern/</id>
    <published>2018-12-13T13:59:43.000Z</published>
    <updated>2018-12-13T14:06:22.479Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/builder-pattern/BuilderPattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/builder-pattern/BuilderPattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="创建型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://keleyundou.github.io/2018/12/facade-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/facade-pattern/</id>
    <published>2018-12-09T16:36:37.000Z</published>
    <updated>2018-12-09T16:38:40.859Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/facade-pattern/FacadePattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/facade-pattern/FacadePattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="结构型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰器模式</title>
    <link href="http://keleyundou.github.io/2018/12/decorator-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/decorator-pattern/</id>
    <published>2018-12-09T16:36:15.000Z</published>
    <updated>2018-12-09T16:38:47.483Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/decorator-pattern/DecoratorPattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/decorator-pattern/DecoratorPattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="结构型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://keleyundou.github.io/2018/12/bridge-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/bridge-pattern/</id>
    <published>2018-12-09T16:28:20.000Z</published>
    <updated>2018-12-09T16:35:04.609Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><img src="/2018/12/bridge-pattern/BridgePattern.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;img src=&quot;/2018/12/bridge-pattern/BridgePattern.png&quot;&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="结构型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://keleyundou.github.io/2018/12/adapter-pattern/"/>
    <id>http://keleyundou.github.io/2018/12/adapter-pattern/</id>
    <published>2018-12-08T16:27:19.000Z</published>
    <updated>2018-12-09T16:38:03.501Z</updated>
    
    <content type="html"><![CDATA[<!-- ![](./asset-test/article-header-img.jpg) --><a id="more"></a><img src="/2018/12/adapter-pattern/AdapterPattern.png">]]></content>
    
    <summary type="html">
    
      &lt;!-- ![](./asset-test/article-header-img.jpg) --&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="结构型模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式类型</title>
    <link href="http://keleyundou.github.io/2018/12/design-pattern-doc/"/>
    <id>http://keleyundou.github.io/2018/12/design-pattern-doc/</id>
    <published>2018-12-08T11:05:31.000Z</published>
    <updated>2018-12-13T14:09:28.335Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式是为特定场景下的问题而定制的解决方案。</p><a id="more"></a><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ul><li>工厂模式</li><li>抽象工厂模式</li><li>单例模式</li><li><a href="../builder-pattern">建造者模式</a></li><li><a href="../prototype-pattern">原型模式</a></li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ul><li><a href="../adapter-pattern">适配器模式</a></li><li><a href="../bridge-pattern">桥接模式</a></li><li><a href="../composite-pattern">组合模式</a></li><li><a href="../decorator-pattern">装饰器模式</a></li><li><a href="../facade-pattern">外观模式</a></li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ul><li>责任链模式</li><li>命令模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li><a href="../strategy-pattern">策略模式</a></li><li>模板模式</li><li>访问者模式</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式是为特定场景下的问题而定制的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://keleyundou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型模式" scheme="http://keleyundou.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="结构型模式" scheme="http://keleyundou.github.io/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="行为型模式" scheme="http://keleyundou.github.io/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>LLDB的使用</title>
    <link href="http://keleyundou.github.io/2018/06/LLDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://keleyundou.github.io/2018/06/LLDB的使用/</id>
    <published>2018-06-13T16:47:36.000Z</published>
    <updated>2018-06-13T17:06:09.666Z</updated>
    
    <content type="html"><![CDATA[<p>控制台查看所有<code>LLDB</code>指令，可以用<code>$help</code></p><a id="more"></a><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><h4 id="添加断点"><a href="#添加断点" class="headerlink" title="添加断点"></a>添加断点</h4><ul><li><p><code>$breakpoint set -n test</code></p></li><li><p><code>$breakpoint set -n &quot;[HomeHotViewController insertItems:isUp:]&quot;</code></p></li><li><p><code>b -n &quot;-[HomeViewController insertItems:isUp:]&quot;</code></p></li></ul><p>OC方法需加双引号<code>&quot;[clasName method]&quot;</code></p><h4 id="查看断点"><a href="#查看断点" class="headerlink" title="查看断点"></a>查看断点</h4><ul><li><code>$breakpoint list</code></li></ul><h4 id="禁用、开启某个断点"><a href="#禁用、开启某个断点" class="headerlink" title="禁用、开启某个断点"></a>禁用、开启某个断点</h4><ul><li><p><code>$breakpoint disable/enable 7</code></p></li><li><p><code>$breakpoint disable/enable 7.1</code></p></li></ul><p>控制台查看禁用某个断点后的信息（含有<code>Options: disabled</code>）如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint list</span><br><span class="line"><span class="type">Current</span> breakpoints:</span><br><span class="line"><span class="number">7</span>: name = 'insertItems:isUp:', locations = <span class="number">4</span>, resolved = <span class="number">4</span>, hit <span class="built_in">count</span> = <span class="number">0</span> <span class="type">Options</span>: disabled </span><br><span class="line"><span class="number">7.1</span>: <span class="keyword">where</span> = <span class="type">Demo</span>`-[<span class="type">HomeFigureViewController</span> insertItems:isUp:] + <span class="number">52</span> at <span class="type">HomeFigureViewController</span>.m:<span class="number">360</span>, address = <span class="number">0x0000000105aede04</span>, resolved, hit <span class="built_in">count</span> = <span class="number">0</span> </span><br><span class="line"><span class="number">7.2</span>: <span class="keyword">where</span> = <span class="type">Demo</span>`-[<span class="type">HomeHotViewController</span> insertItems:isUp:] + <span class="number">65</span> at <span class="type">HomeHotViewController</span>.m:<span class="number">204</span>, address = <span class="number">0x0000000105cdd341</span>, resolved, hit <span class="built_in">count</span> = <span class="number">0</span> </span><br><span class="line"><span class="number">7.3</span>: <span class="keyword">where</span> = <span class="type">Demo</span>`-[<span class="type">TopicViewController</span> insertItems:isUp:] + <span class="number">52</span> at <span class="type">TopicViewController</span>.m:<span class="number">276</span>, address = <span class="number">0x0000000105d67f94</span>, resolved, hit <span class="built_in">count</span> = <span class="number">0</span> </span><br><span class="line"><span class="number">7.4</span>: <span class="keyword">where</span> = <span class="type">Demo</span>`-[lashNewsViewController insertItems:isUp:] + <span class="number">55</span> at lashNewsViewController.m:<span class="number">163</span>, address = <span class="number">0x0000000105f3c787</span>, resolved, hit <span class="built_in">count</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h4><ul><li><code>$breakpoint delete 6/6.1</code></li></ul><h4 id="给某个方法添加断点"><a href="#给某个方法添加断点" class="headerlink" title="给某个方法添加断点"></a>给某个方法添加断点</h4><p>全局含有某个方法的地方均设置断点</p><ul><li><code>$breakpoint set --selector insertItems:isUp:</code></li></ul><p>根据方法关键字全局设置断点</p><ul><li><code>$breakpoint set -r insertItems:</code></li></ul><p>给具体某个类中的方法设置断点</p><ul><li><code>$breakpoint set --file HomeHotViewController.m --selector insertItems:isUp:</code></li></ul><h4 id="附加指令"><a href="#附加指令" class="headerlink" title="附加指令"></a>附加指令</h4><p>添加断点附加加指令</p><ul><li><code>$breakpoint command add 2.1</code></li></ul><p>控制台的输出如下，需要输入相应指令，结束输入<code>DONE</code>按回车键</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Enter</span> your debugger command(s).  <span class="type">Type</span> '<span class="type">DONE'</span> to end.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>查询断点附加指令</p><ul><li><code>$breakpoint command list 2.1</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint command list <span class="number">2.1</span></span><br><span class="line"><span class="type">Breakpoint</span> <span class="number">2.1</span>:</span><br><span class="line">    <span class="type">Breakpoint</span> commands:</span><br><span class="line">        po <span class="keyword">self</span></span><br><span class="line">        po <span class="keyword">self</span>.view</span><br></pre></td></tr></table></figure><p>删除附加指令</p><ul><li><code>$breakpoint command delete 2.1</code></li></ul><h3 id="查看堆栈信息"><a href="#查看堆栈信息" class="headerlink" title="查看堆栈信息"></a>查看堆栈信息</h3><ul><li><p><code>$bt</code></p></li><li><p><code>$up</code> 跳转上一步调用的方法查看信息</p></li><li><p><code>$down</code> 跳转下一步调用的方法查看信息</p></li><li><p><code>$frame select 2</code> 跳转到堆栈信息中的某个方法</p></li><li><p><code>$frame variable</code> 查看当前方法所有变量</p></li><li><p><code>$thread return</code> 回滚上一次调用的方法并return</p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(lldb) breakpoint list</span><br><span class="line"><span class="type">Current</span> breakpoints:</span><br><span class="line"><span class="number">1</span>: name = '-[<span class="type">TestViewController</span> test2]', locations = <span class="number">1</span>, resolved = <span class="number">1</span>, hit <span class="built_in">count</span> = <span class="number">1</span></span><br><span class="line">  <span class="number">1.1</span>: <span class="keyword">where</span> = <span class="type">Demo</span>`-[<span class="type">TestViewController</span> test2] + <span class="number">30</span> at <span class="type">TestViewController</span>.m:<span class="number">37</span>, address = <span class="number">0x000000010caf2cce</span>, resolved, hit <span class="built_in">count</span> = <span class="number">1</span> </span><br><span class="line">(lldb) bt</span><br><span class="line">* thread #<span class="number">1</span>, queue = 'com.apple.main-thread', stop reason = breakpoint <span class="number">1.1</span></span><br><span class="line">  * frame #<span class="number">0</span>: <span class="number">0x000000010caf2cce</span> <span class="type">Demo</span>`-[<span class="type">TestViewController</span> test2](<span class="keyword">self</span>=<span class="number">0x00007f903dc09910</span>, _cmd=<span class="string">"test2"</span>) at <span class="type">TestViewController</span>.m:<span class="number">37</span></span><br><span class="line">    frame #<span class="number">1</span>: <span class="number">0x000000010caf2c9e</span> <span class="type">Demo</span>`-[<span class="type">TestViewController</span> test1](<span class="keyword">self</span>=<span class="number">0x00007f903dc09910</span>, _cmd=<span class="string">"test1"</span>) at <span class="type">TestViewController</span>.m:<span class="number">33</span></span><br><span class="line">    frame #<span class="number">2</span>: <span class="number">0x000000010caf2e01</span> <span class="type">Demo</span>`-[<span class="type">TestViewController</span> touchesBegan:withEvent:](<span class="keyword">self</span>=<span class="number">0x00007f903dc09910</span>, _cmd=<span class="string">"touchesBegan:withEvent:"</span>, touches=<span class="number">1</span> element, event=<span class="number">0x000060000011a4c0</span>) at <span class="type">TestViewController</span>.m:<span class="number">52</span></span><br><span class="line">    frame #<span class="number">3</span>: <span class="number">0x000000010e0e07c7</span> <span class="type">UIKit</span>`forwardTouchMethod + <span class="number">340</span></span><br><span class="line">    frame #<span class="number">4</span>: <span class="number">0x000000010e0e0662</span> <span class="type">UIKit</span>`-[<span class="type">UIResponder</span> touchesBegan:withEvent:] + <span class="number">49</span></span><br><span class="line">    frame #<span class="number">5</span>: <span class="number">0x000000010df28e7a</span> <span class="type">UIKit</span>`-[<span class="type">UIWindow</span> _sendTouchesForEvent:] + <span class="number">2052</span></span><br><span class="line">    frame #<span class="number">6</span>: <span class="number">0x000000010df2a821</span> <span class="type">UIKit</span>`-[<span class="type">UIWindow</span> sendEvent:] + <span class="number">4086</span></span><br><span class="line">    frame #<span class="number">7</span>: <span class="number">0x000000010dece370</span> <span class="type">UIKit</span>`-[<span class="type">UIApplication</span> sendEvent:] + <span class="number">352</span></span><br><span class="line">    frame #<span class="number">8</span>: <span class="number">0x000000010e80f57f</span> <span class="type">UIKit</span>`__dispatchPreprocessedEventFromEventQueue + <span class="number">2796</span></span><br><span class="line">    frame #<span class="number">9</span>: <span class="number">0x000000010e812194</span> <span class="type">UIKit</span>`__handleEventQueueInternal + <span class="number">5949</span></span><br><span class="line">    frame #<span class="number">10</span>: <span class="number">0x0000000111bd8bb1</span> <span class="type">CoreFoundation</span>`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + <span class="number">17</span></span><br><span class="line">    frame #<span class="number">11</span>: <span class="number">0x0000000111bbd4af</span> <span class="type">CoreFoundation</span>`__CFRunLoopDoSources0 + <span class="number">271</span></span><br><span class="line">    frame #<span class="number">12</span>: <span class="number">0x0000000111bbca6f</span> <span class="type">CoreFoundation</span>`__CFRunLoopRun + <span class="number">1263</span></span><br><span class="line">    frame #<span class="number">13</span>: <span class="number">0x0000000111bbc30b</span> <span class="type">CoreFoundation</span>`<span class="type">CFRunLoopRunSpecific</span> + <span class="number">635</span></span><br><span class="line">    frame #<span class="number">14</span>: <span class="number">0x0000000115997a73</span> <span class="type">GraphicsServices</span>`<span class="type">GSEventRunModal</span> + <span class="number">62</span></span><br><span class="line">    frame #<span class="number">15</span>: <span class="number">0x000000010deb30b7</span> <span class="type">UIKit</span>`<span class="type">UIApplicationMain</span> + <span class="number">159</span></span><br><span class="line">    frame #<span class="number">16</span>: <span class="number">0x000000010caf2e9f</span> <span class="type">Demo</span>`main(argc=<span class="number">1</span>, argv=<span class="number">0x00007ffee3111090</span>) at main.m:<span class="number">18</span></span><br><span class="line">    frame #<span class="number">17</span>: <span class="number">0x00000001110dc955</span> libdyld.dylib`start + <span class="number">1</span></span><br><span class="line">(lldb) up</span><br><span class="line">frame #<span class="number">1</span>: <span class="number">0x000000010caf2c9e</span> <span class="type">Demo</span>`-[<span class="type">TestViewController</span> test1](<span class="keyword">self</span>=<span class="number">0x00007f903dc09910</span>, _cmd=<span class="string">"test1"</span>) at <span class="type">TestViewController</span>.m:<span class="number">33</span></span><br><span class="line">   <span class="number">30</span>  </span><br><span class="line">   <span class="number">31</span>  - (void)test1 &#123;</span><br><span class="line">   <span class="number">32</span>      <span class="type">NSLog</span>(@<span class="string">"%s"</span>, __func__);</span><br><span class="line">-&gt; <span class="number">33</span>      [4m[[0mself test2];</span><br><span class="line">   <span class="number">34</span>  &#125;</span><br><span class="line">   <span class="number">35</span>  </span><br><span class="line">   <span class="number">36</span>  - (void)test2 &#123;</span><br><span class="line">(lldb) down</span><br><span class="line">frame #<span class="number">0</span>: <span class="number">0x000000010caf2cce</span> <span class="type">Demo</span>`-[<span class="type">TestViewController</span> test2](<span class="keyword">self</span>=<span class="number">0x00007f903dc09910</span>, _cmd=<span class="string">"test2"</span>) at <span class="type">TestViewController</span>.m:<span class="number">37</span></span><br><span class="line">   <span class="number">34</span>  &#125;</span><br><span class="line">   <span class="number">35</span>  </span><br><span class="line">   <span class="number">36</span>  - (void)test2 &#123;</span><br><span class="line">-&gt; <span class="number">37</span>      [4mN[0mSLog(@<span class="string">"%s"</span>, __func__);</span><br><span class="line">   <span class="number">38</span>      [<span class="keyword">self</span> test3];</span><br><span class="line">   <span class="number">39</span>  &#125;</span><br><span class="line">   <span class="number">40</span>  </span><br><span class="line">(lldb) frame select <span class="number">2</span></span><br><span class="line">frame #<span class="number">2</span>: <span class="number">0x000000010caf2e01</span> <span class="type">Demo</span>`-[<span class="type">TestViewController</span> touchesBegan:withEvent:](<span class="keyword">self</span>=<span class="number">0x00007f903dc09910</span>, _cmd=<span class="string">"touchesBegan:withEvent:"</span>, touches=<span class="number">1</span> element, event=<span class="number">0x000060000011a4c0</span>) at <span class="type">TestViewController</span>.m:<span class="number">52</span></span><br><span class="line">   <span class="number">49</span>  </span><br><span class="line">   <span class="number">50</span>  - (void)touchesBegan:(<span class="type">NSSet</span>&lt;<span class="type">UITouch</span> *&gt; *)touches withEvent:(<span class="type">UIEvent</span> *)event &#123;</span><br><span class="line">   <span class="number">51</span>      <span class="type">NSLog</span>(@<span class="string">"%s"</span>, __func__);</span><br><span class="line">-&gt; <span class="number">52</span>      [4m[[0mself test1];</span><br><span class="line">   <span class="number">53</span>      </span><br><span class="line">   <span class="number">54</span>  &#125;</span><br><span class="line">   <span class="number">55</span>  </span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><!-- ### 流程控制> `$c` --continue 程序继续执行> `$n` --next 单步执行，遇子函数会当做整体处理> `$s` --step in 单步执行，遇子函数会进入子函数体 --><h3 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h3><p>给某个对象的属性设置断点</p><ul><li><code>$watchpoint set variable p1-&gt;_name</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) watchpoint <span class="keyword">set</span> variable p1-&gt;_name</span><br><span class="line"><span class="type">Watchpoint</span> created: <span class="type">Watchpoint</span> <span class="number">1</span>: addr = <span class="number">0x604000037168</span> size = <span class="number">8</span> state = enabled type = w</span><br><span class="line">    declare @ '/<span class="type">Users</span>/icepoint/<span class="type">Desktop</span>/<span class="type">Demo</span>/<span class="type">Demo</span>/<span class="type">TestViewController</span>.m:<span class="number">30</span>'</span><br><span class="line">    watchpoint spec = 'p1-&gt;_name'</span><br><span class="line">    new value: <span class="number">0x0000000109ab8848</span></span><br></pre></td></tr></table></figure><p>更具内存地址设置断点</p><ul><li><code>$watchpoint set expression 0x000060c000221528</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) frame variable</span><br><span class="line">(<span class="type">TestViewController</span> *) <span class="keyword">self</span> = <span class="number">0x00007f890bc08f00</span></span><br><span class="line">(<span class="type">SEL</span>) _cmd = <span class="string">"viewDidLoad"</span></span><br><span class="line">(<span class="type">Person</span> *) p1 = <span class="number">0x000060c000221520</span></span><br><span class="line">(<span class="type">Person</span> *) p2 = <span class="number">0x4084d80000000000</span></span><br><span class="line">(lldb) p &amp;p1-&gt;_name</span><br><span class="line">(<span class="type">NSString</span> **) $<span class="number">0</span> = <span class="number">0x000060c000221528</span></span><br><span class="line">(lldb) watchpoint <span class="keyword">set</span> expression <span class="number">0x000060c000221528</span></span><br><span class="line"><span class="type">Watchpoint</span> created: <span class="type">Watchpoint</span> <span class="number">1</span>: addr = <span class="number">0x60c000221528</span> size = <span class="number">8</span> state = enabled type = w</span><br><span class="line">    new value: <span class="number">4418234440</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;控制台查看所有&lt;code&gt;LLDB&lt;/code&gt;指令，可以用&lt;code&gt;$help&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="LLDB" scheme="http://keleyundou.github.io/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>How to use PlistBuddy</title>
    <link href="http://keleyundou.github.io/2017/08/How-to-use-PlistBuddy/"/>
    <id>http://keleyundou.github.io/2017/08/How-to-use-PlistBuddy/</id>
    <published>2017-08-18T08:19:36.000Z</published>
    <updated>2017-08-18T09:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PlistBuddy"><a href="#PlistBuddy" class="headerlink" title="PlistBuddy"></a>PlistBuddy</h2><p>一个plist文件操作工具。记录下方便以后使用，常用以下4个方法：</p><ul><li><em><code>Add</code></em> 添加</li><li><em><code>Delete</code></em> 删除</li><li><em><code>Set</code></em> 更新</li><li><em><code>Print</code></em> 读取</li><li>…</li></ul><a id="more"></a><p>更多方法可 <code>--help</code>， 以上具体使用方法如下：</p><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><ul><li>添加一个<code>key</code>:<code>code</code> <code>value</code>:<code>404</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :code integer 404"</span> t1.plist</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dict &#123;</span><br><span class="line">    code = 404</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加<code>Array</code>，先创建一个数组变量<code>list</code>, 然后往<code>list</code>中添加数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :list Array"</span> t1.plist</span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :list: string a1"</span> t1.plist</span><br><span class="line"><span class="comment"># 根据索引插入值</span></span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :list:0 string a2"</span> t1.plist</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dict &#123;</span><br><span class="line">    list = Array &#123;</span><br><span class="line">        a2</span><br><span class="line">        a1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>添加<code>Dict</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result Dict"</span> t1.plist</span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:name string Tom"</span> t1.plist</span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:age integer 18"</span> t1.plist</span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:list Array"</span> t1.plist</span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:list: string aa"</span> t1.plist</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dict &#123;</span><br><span class="line">    result = Dict &#123;</span><br><span class="line">        age = 18</span><br><span class="line">        list = Array &#123;</span><br><span class="line">            aa</span><br><span class="line">        &#125;</span><br><span class="line">        name = Tom</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><ul><li>根据<code>key</code>删除 对应的<code>value</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy <span class="string">"Delete :code"</span> t1.plist</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>根据<code>key</code>更新<code>value</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy <span class="string">"Set :code 200"</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dict &#123;</span><br><span class="line">    code = 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h3><ul><li>根据<code>key</code>读取<code>value</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy <span class="string">"Print"</span> t1.plist</span><br><span class="line">/usr/libexec/PlistBuddy <span class="string">"Print :code"</span> t1.plist</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># t1.plist</span></span><br><span class="line">Dict &#123;</span><br><span class="line">    result = Dict &#123;</span><br><span class="line">        age = 18</span><br><span class="line">        list = Array &#123;</span><br><span class="line">            aa</span><br><span class="line">        &#125;</span><br><span class="line">        name = Tom</span><br><span class="line">    &#125;</span><br><span class="line">    code = 200</span><br><span class="line">    list = Array &#123;</span><br><span class="line">        a2</span><br><span class="line">        a1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># code</span></span><br><span class="line">200</span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/keleyundou/blog_demo_repo/tree/master/PlistBuddy" target="_blank" rel="noopener">Demo</a></p><!-- http://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/ http://www.jianshu.com/p/2167f755c47e -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PlistBuddy&quot;&gt;&lt;a href=&quot;#PlistBuddy&quot; class=&quot;headerlink&quot; title=&quot;PlistBuddy&quot;&gt;&lt;/a&gt;PlistBuddy&lt;/h2&gt;&lt;p&gt;一个plist文件操作工具。记录下方便以后使用，常用以下4个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/em&gt; 添加&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;Delete&lt;/code&gt;&lt;/em&gt; 删除&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/em&gt; 更新&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;Print&lt;/code&gt;&lt;/em&gt; 读取&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="PlistBuddy" scheme="http://keleyundou.github.io/tags/PlistBuddy/"/>
    
      <category term="shell" scheme="http://keleyundou.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Dispatch Semaphore</title>
    <link href="http://keleyundou.github.io/2017/08/Dispatch-Semaphore/"/>
    <id>http://keleyundou.github.io/2017/08/Dispatch-Semaphore/</id>
    <published>2017-08-15T08:18:16.000Z</published>
    <updated>2017-08-16T04:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><!-- 创建一个并发控制来同步任务和有限资源访问，换句话说，就是控制并发的线程数量。 --><p><strong>信号量</strong>（英语：<code>Semaphore</code>）又称为 <strong>信号量</strong> 、<strong>旗语</strong>，是一个同步对象，用于保持在0至指定最大值之间的一个计数值。当线程完成一次对该<code>semaphore</code>对象等待（wait）时，该计数值减1；当线程完成一次对<code>semaphore</code>对象释放时，计数值加1。当计数值为0时，则线程等待该<code>semaphore</code>对象不再能成功直至该<code>semaphore</code>对象变成signaled状态。<code>semaphore</code>对象的计数值大于0，为signaled状态；计数值等于0，为nonsignaled状态。<br><code>semaphore</code>对象适用于控制一个仅支持有限个用户的共享资源。是一种不需要使用<code>busy waiting</code>的一种方法。—— 维基百科</p><a id="more"></a><h3 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h3><p>为了方便理解<code>semaphore</code>，找到一个经典案例：停车场问题</p><p>假设停车场只有三个车位，一开始三个车位都是空的。这时如果同时来了五辆车，看门人允许其中三辆不受阻碍的进入，然后放下车拦，剩下的车则必须在入口等待，此后来的车也都不得不在入口处等待。这时，有一辆车离开停车场，看门人得知后，打开车拦，放入一辆，如果又离开两辆，则又可以放入两辆，如此往复。</p><p>在这个停车场系统中，车位是公共资源，每辆车好比一个线程，看门人起的就是信号量的作用。</p><p>更进一步，信号量的特性如下：信号量是一个非负整数（车位数），所有通过它的线程（车辆）都会将该整数减一（通过它当然是为了使用资源），当该整数值为零时，所有试图通过它的线程都将处于等待状态。在信号量上我们定义两种操作： Wait（等待） 和 Signal（释放）。 当一个线程调用Wait（等待）操作时，它要么通过然后将信号量减一，要么一直等下去，直到信号量大于一或超时。Signal（释放）实际上是在信号量上执行加操作，对应于车辆离开停车场，该操作之所以叫做“释放”是因为加操作实际上是释放了由信号量守护的资源。</p><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>当并行执行的处理更新数据时，会产生数据不一致的情况，有时程序还会异常结束。虽然使用<code>Serial Dispatch Queue</code>和<code>dispatch_barrier_async</code>函数可以避免此类问题，但有必要进行更细粒度的排他控制。例如下面这种情况，将所有数据追加到<code>NSMutableArray</code>中。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *buffer = @[].mutableCopy;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">          [buffer addObject:@(i)];</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因为此段代码使用<code>Global Dispatch Queue</code>更新<code>NSMutableArray</code>类对象，所以执行后由于内存错误导致程序异常结束的概率很高。此时应使用<code>Dispatch Semaphore</code>。</p><p><code>semaphore</code> 相关函数</p><ul><li><p>dispatch_semaphore_create</p><blockquote><p>创建一个信号的总量 参数是一个整数，表示初始值</p></blockquote></li><li><p>dispatch_semaphore_signal</p><blockquote><p>发送一个信号，使信号总量+1</p></blockquote></li><li><p>dispatch_semaphore_wait</p><blockquote><p>等待一个信号，使信号总量-1，当信号总量&lt;0时，会一直等待阻塞线程，直到信号量再次大于0的时候再执行</p></blockquote></li></ul><p>在前面的代码片段中使用<code>Dispatch Semaphore</code>看看。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">  dispatch_semaphore_t dsema = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *buffer = @[].mutableCopy;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">          dispatch_semaphore_wait(dsema, DISPATCH_TIME_FOREVER);</span><br><span class="line">          [buffer addObject:@(i)];</span><br><span class="line">          dispatch_semaphore_signal(dsema);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p>改变某个变量值</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">  dispatch_semaphore_t dsema = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">  __block <span class="keyword">int</span> sum = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">          dispatch_semaphore_wait(dsema, DISPATCH_TIME_FOREVER);</span><br><span class="line">          <span class="keyword">int</span> value = arc4random()%<span class="number">4</span> + <span class="number">5</span>;</span><br><span class="line">          <span class="built_in">NSLog</span>(<span class="string">@"%d-%d = %d"</span>,sum,value, sum-value);</span><br><span class="line">          sum=sum-value;</span><br><span class="line">          dispatch_semaphore_signal(dsema);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据打印的日志看看效果</p><ul><li>未使用信号量操作</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910625</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910640</span>] <span class="number">1000</span><span class="number">-5</span> = <span class="number">995</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910626</span>] <span class="number">1000</span><span class="number">-6</span> = <span class="number">994</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910628</span>] <span class="number">1000</span><span class="number">-5</span> = <span class="number">995</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910711</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910713</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910712</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910714</span>] <span class="number">1000</span><span class="number">-6</span> = <span class="number">994</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910625</span>] <span class="number">993</span><span class="number">-7</span> = <span class="number">986</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910715</span>] <span class="number">993</span><span class="number">-5</span> = <span class="number">988</span></span><br></pre></td></tr></table></figure><ul><li>使用信号量操作</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.994</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908711</span>] <span class="number">1000</span><span class="number">-6</span> = <span class="number">994</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908695</span>] <span class="number">994</span><span class="number">-5</span> = <span class="number">989</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908697</span>] <span class="number">989</span><span class="number">-7</span> = <span class="number">982</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908694</span>] <span class="number">982</span><span class="number">-5</span> = <span class="number">977</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908962</span>] <span class="number">977</span><span class="number">-8</span> = <span class="number">969</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908963</span>] <span class="number">969</span><span class="number">-6</span> = <span class="number">963</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908964</span>] <span class="number">963</span><span class="number">-6</span> = <span class="number">957</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908965</span>] <span class="number">957</span><span class="number">-6</span> = <span class="number">951</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908711</span>] <span class="number">951</span><span class="number">-8</span> = <span class="number">943</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908966</span>] <span class="number">943</span><span class="number">-8</span> = <span class="number">935</span></span><br></pre></td></tr></table></figure><h4 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h4><p>顺序执行task</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line">dispatch_semaphore_t dsema = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"process: %d"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_semaphore_signal(dsema);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"wait..."</span>);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"--&gt;%ld"</span>, dispatch_semaphore_wait(dsema, DISPATCH_TIME_FOREVER));</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"finish."</span>);</span><br></pre></td></tr></table></figure><p>打印日志如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">58.401</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] start</span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">58.401</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] wait...</span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">00.968</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">0</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">01.973</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">1</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">02.979</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">2</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">03.985</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">3</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">04.990</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">4</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">04.991</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] --&gt;<span class="number">0</span></span><br><span class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">04.991</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] finish.</span><br></pre></td></tr></table></figure><p>因为信号总量是0 在执行到<code>dispatch_semaphore_wait</code>时 wait 使信号量-1，并不会返回结果值，「猜测：wait内部」处于等待状态（当前及后面的语句处于阻塞状态），直到触发signal，使信号量+1，继续执行wait语句及后面的语句</p><hr><p>Reference:</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E8%99%9F%E6%A8%99" target="_blank" rel="noopener">维基百科-信号量</a></li><li><a href="https://pan.baidu.com/s/1pKLEJl5" target="_blank" rel="noopener">Objective-C高级编程</a></li><li><a href="https://m.aliyun.com/yunqi/articles/30814?spm=5176.100239.0.0.lr2290" target="_blank" rel="noopener">GCD之信号量机制</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;信号量&quot;&gt;&lt;a href=&quot;#信号量&quot; class=&quot;headerlink&quot; title=&quot;信号量&quot;&gt;&lt;/a&gt;信号量&lt;/h3&gt;&lt;!-- 创建一个并发控制来同步任务和有限资源访问，换句话说，就是控制并发的线程数量。 --&gt;
&lt;p&gt;&lt;strong&gt;信号量&lt;/strong&gt;（英语：&lt;code&gt;Semaphore&lt;/code&gt;）又称为 &lt;strong&gt;信号量&lt;/strong&gt; 、&lt;strong&gt;旗语&lt;/strong&gt;，是一个同步对象，用于保持在0至指定最大值之间的一个计数值。当线程完成一次对该&lt;code&gt;semaphore&lt;/code&gt;对象等待（wait）时，该计数值减1；当线程完成一次对&lt;code&gt;semaphore&lt;/code&gt;对象释放时，计数值加1。当计数值为0时，则线程等待该&lt;code&gt;semaphore&lt;/code&gt;对象不再能成功直至该&lt;code&gt;semaphore&lt;/code&gt;对象变成signaled状态。&lt;code&gt;semaphore&lt;/code&gt;对象的计数值大于0，为signaled状态；计数值等于0，为nonsignaled状态。&lt;br&gt;&lt;code&gt;semaphore&lt;/code&gt;对象适用于控制一个仅支持有限个用户的共享资源。是一种不需要使用&lt;code&gt;busy waiting&lt;/code&gt;的一种方法。—— 维基百科&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="GCD" scheme="http://keleyundou.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Tech sites</title>
    <link href="http://keleyundou.github.io/2017/08/Tech-sites/"/>
    <id>http://keleyundou.github.io/2017/08/Tech-sites/</id>
    <published>2017-08-09T07:00:38.000Z</published>
    <updated>2017-08-16T07:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">JavaScript Doc</a></li><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li><li><a href="https://jaq.alibaba.com/community/category?spm=a313e.7916646.25000001.1.55489a7agFjyK2&amp;catid=4" target="_blank" rel="noopener">阿里聚安全</a></li><li><a href="http://nshipster.com/" target="_blank" rel="noopener">NSHipster</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ja
      
    
    </summary>
    
      <category term="Tech" scheme="http://keleyundou.github.io/categories/Tech/"/>
    
    
      <category term="Tech" scheme="http://keleyundou.github.io/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>APNs原理及环境搭建</title>
    <link href="http://keleyundou.github.io/2017/06/APNs%E5%8E%9F%E7%90%86%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://keleyundou.github.io/2017/06/APNs原理及环境搭建/</id>
    <published>2017-06-13T02:43:51.000Z</published>
    <updated>2017-06-13T03:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h1><p>推送在我们的生活中无处不在，下面就已开发者的角度来为你介绍其工作原理及如何搭建push server环境。<br>一款APP要想收到消息推送，有一个必要前提——配置推送证书。这里不在介绍如何配置推送证书。<br><a id="more"></a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="server下发消息给APP"><a href="#server下发消息给APP" class="headerlink" title="server下发消息给APP"></a>server下发消息给APP</h3><p>Provider将消息推送给APNs，APNs将消息推送给Device，Device再将消息通知给APP。</p><p><img src="http://upload-images.jianshu.io/upload_images/741964-e1810ee703aa2a38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="remote_notif_simple_2x.png"></p><h3 id="推送原理"><a href="#推送原理" class="headerlink" title="推送原理"></a>推送原理</h3><p>推送的前提是Device需向APNs发起注册注册，注册成功后APNs下发一个deviceToken给APP，APP再将其发送给Provider，当有要被推送的消息时，Provider会将消息结合deviceToken按指定的消息格式打包发送给APNs，然后由APNs推送给Device。</p><h4 id="deviceToken生成"><a href="#deviceToken生成" class="headerlink" title="deviceToken生成"></a>deviceToken生成</h4><p><img src="http://upload-images.jianshu.io/upload_images/741964-bdc4ff3b379c5bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="token_generation_2x.png"></p><ol><li>Device向APNs注册远程推送服务</li><li>APNs经过内部流程处理生成一个deviceToken，下发给Device</li><li>Device将获取到的deviceToken发送给Provider</li></ol><h4 id="推送过程"><a href="#推送过程" class="headerlink" title="推送过程"></a>推送过程</h4><p><img src="http://upload-images.jianshu.io/upload_images/741964-a406a6f2f707d0a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="token_trust_2x.png"></p><ol><li>APP链接APNs的过程中，APNs会验证deviceToken，链接成功后会维持一个TCP长连接</li><li>Provider将消息结合deviceToken封包发送给APNs</li><li>APNs将接收到的消息发送给deviceToken设备</li><li>设备再将收到的消息通知给APP</li></ol><h2 id="server搭建"><a href="#server搭建" class="headerlink" title="server搭建"></a>server搭建</h2><h3 id="合成PEM证书"><a href="#合成PEM证书" class="headerlink" title="合成PEM证书"></a>合成PEM证书</h3><p>命令行：</p><ul><li>生成公钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in aps_development.cer -inform der -out PushPublicCert.pem</span><br></pre></td></tr></table></figure><ul><li>生成私钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -nocerts -out PushPrivateKey.pem -in Push.p12</span><br></pre></td></tr></table></figure><ul><li><p>将刚才生成的两个pem文件合成到一个文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat PushPublicCert.pem PushPrivateKey.pem &gt; ck.pem</span><br></pre></td></tr></table></figure></li><li><p>测试证书是否正常工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet gateway.sandbox.push.apple.com 2195</span><br></pre></td></tr></table></figure></li><li><p>利用SSL证书和私钥来设置一个安全的链接去链接苹果服务器</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert PushPublicCert.pem -key PushPrivateKey.pem</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl s_client -connect api.push.apple.com:443 -cert PushPublicCert.pem -key PushPrivateKey.pem</span><br></pre></td></tr></table></figure><h3 id="server-code"><a href="#server-code" class="headerlink" title="server code"></a>server code</h3><p>旧：<br>开发环境：gateway.sandbox.push.apple.com:2195<br>发布环境：gateway.push.apple.com:2195</p><p>新：<br>开发环境：api.development.push.apple.com:443<br>发布环境：api.push.apple.com:443</p><p><a href="https://github.com/keleyundou/APNsProject" target="_blank" rel="noopener">Download_APNsProject</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以前仅知道原理，至于服务端如何与苹果服务器通信没有一点概念。于是利用闲暇时间翻阅资料写了篇关于APNs如何在服务端发送。争取不做口头的巨人行动的矮子（初中的时候班主任就时刻告诉我们这句话，现在基本上抛之脑后 冷汗！冷汗！）。目前只是整理了基于SSL协议的TCP长连接流通讯，HTTP/2后续会整理出来。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1" target="_blank" rel="noopener">AppleDoc——APNs</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;APNs&quot;&gt;&lt;a href=&quot;#APNs&quot; class=&quot;headerlink&quot; title=&quot;APNs&quot;&gt;&lt;/a&gt;APNs&lt;/h1&gt;&lt;p&gt;推送在我们的生活中无处不在，下面就已开发者的角度来为你介绍其工作原理及如何搭建push server环境。&lt;br&gt;一款APP要想收到消息推送，有一个必要前提——配置推送证书。这里不在介绍如何配置推送证书。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="APNs" scheme="http://keleyundou.github.io/tags/APNs/"/>
    
  </entry>
  
  <entry>
    <title>周刊◆第二期</title>
    <link href="http://keleyundou.github.io/2017/06/%E5%91%A8%E5%88%8A%E2%97%86%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>http://keleyundou.github.io/2017/06/周刊◆第二期/</id>
    <published>2017-06-04T14:56:30.000Z</published>
    <updated>2017-08-21T09:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐技术文章</p><ul><li><a href="http://www.jianshu.com/p/382593c3b24d" target="_blank" rel="noopener">开源IM工程“蘑菇街TeamTalk”的现状：一场有始无终的开源秀</a></li><li><a href="http://blog.makeex.com/2015/05/30/the-architecture-of-teamtalk-mac-client/" target="_blank" rel="noopener">TeamTalk 之 Mac 客户端架构分析</a></li><li><a href="http://www.bluefoxah.org/teamtalk/new_tt_deploy.html" target="_blank" rel="noopener">新版TeamTalk部署教程</a></li><li><a href="http://www.jianshu.com/p/5559f838a7b1" target="_blank" rel="noopener">来自蘑菇街的开源IM：TeamTalk</a></li><li><a href="http://www.jianshu.com/p/1359165bae4e" target="_blank" rel="noopener">mac TeamTalk开发点点滴滴之一——DDLogic框架分解 - 刀哥的技术随笔</a></li><li><a href="http://www.jianshu.com/p/403ee06a584e" target="_blank" rel="noopener">iOS面试题大全-点亮你iOS技能树</a></li><li><a href="http://tech.glowing.com/cn/implement-kvo/" target="_blank" rel="noopener">如何自己动手实现 KVO</a></li><li><a href="http://www.cocoachina.com/industry/20130321/5862.html" target="_blank" rel="noopener">手把手教你做iOS推送</a></li><li><a href="http://www.cnblogs.com/zhouxihi/p/6422252.html" target="_blank" rel="noopener">自己动手搭建苹果推送Push服务器</a></li></ul><!-- [IOS学习笔记40——苹果推送机制APNs（一）](http://blog.csdn.net/ryantang03/article/details/8482259) --><!-- [APNs Overview](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1) -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推荐技术文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/382593c3b24d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源IM工程“蘑菇街TeamTalk”的现状：一场有始无终的开源秀&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="开发周刊" scheme="http://keleyundou.github.io/categories/%E5%BC%80%E5%8F%91%E5%91%A8%E5%88%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>周刊◆第一期</title>
    <link href="http://keleyundou.github.io/2017/05/%E5%91%A8%E5%88%8A%E2%97%86%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>http://keleyundou.github.io/2017/05/周刊◆第一期/</id>
    <published>2017-05-22T02:27:16.000Z</published>
    <updated>2017-06-13T04:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐技术文章</p><ul><li><a href="https://techblog.toutiao.com/2017/03/28/fullscreen/" target="_blank" rel="noopener">iOS端一次视频全屏需求的实现</a></li><li><a href="http://www.52im.net/thread-228-1-1.html" target="_blank" rel="noopener">即时通讯音视频开发（一）：视频编解码之理论概述</a></li><li><a href="https://techblog.toutiao.com/2017/03/28/fullscreen/" target="_blank" rel="noopener">iOS端一次视频全屏需求的实现</a></li><li><a href="https://sdk.cn/news/5556" target="_blank" rel="noopener">从直播CDN的原理说起,谈如何解决延时和连麦的老难题?</a><!-- http://www.infoq.com/cn/presentations/how-to-solve-the-delay-and-mic-problem?utm_source=infoq&utm_campaign=user_page&utm_medium=link --></li><li><a href="http://www.infoq.com/cn/news/2014/07/cdn-for-mobile" target="_blank" rel="noopener">为什么CDN对移动客户端加速“没有”效果</a></li><li><a href="http://www.cnblogs.com/Unclefeng/p/6363152.html" target="_blank" rel="noopener">iOS-直播开发(开发从底层做起)</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=2653547042&amp;idx=1&amp;sn=26d8728548a6b5b657079eeab121e283&amp;scene=1&amp;srcid=0428msEitG9LJ3JaKGaRCEjg&amp;pass_ticket=CdMA9ZwxlVwo6NU4FLtW1wgLnWFyK3SF6pCUN70Abd7Q4YdSuvxvf03sg%2BrKmDvU#rd" target="_blank" rel="noopener">移动直播技术秒开优化经验</a></li><li><a href="http://www.jianshu.com/p/b142908f5a85" target="_blank" rel="noopener">Keychain介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推荐技术文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techblog.toutiao.com/2017/03/28/fullscreen/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS端一次视频全屏需求的实现&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
      <category term="开发周刊" scheme="http://keleyundou.github.io/categories/%E5%BC%80%E5%8F%91%E5%91%A8%E5%88%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>随笔之Hexo升级之路</title>
    <link href="http://keleyundou.github.io/2016/07/%E9%9A%8F%E7%AC%94%E4%B9%8BHexo%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/"/>
    <id>http://keleyundou.github.io/2016/07/随笔之Hexo升级之路/</id>
    <published>2016-07-29T10:05:20.000Z</published>
    <updated>2016-07-29T10:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随笔-Hexo-升级"><a href="#随笔-Hexo-升级" class="headerlink" title="随笔 Hexo 升级"></a>随笔 Hexo 升级</h1><p>最近在将<code>hexo</code>升级到6.2.0的过生成中遇到了一些小问题，虽然正常功能都能使用，但在你debug的时候<br>终端上跳出那么几个扎眼的颜色总是不是那么狠舒服。对于我这种完美主义者必然要将其抹杀。</p><a id="more"></a><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><blockquote><p><code>nodejs</code>中文网 <a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a> 升级 <code>node</code>至<code>v6.2.0</code></p><p><code>npm update</code> 更新 <code>node_modules</code> 这个比较手贱 没更新相关组件而是更新了所有的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&gt; &#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>npm install hexo --no-optional</code>不好使</p><p>更换<code>npm</code>淘宝镜像:<a href="https://npm.taobao.org" target="_blank" rel="noopener">https://npm.taobao.org</a></p><p>解决方案：<a href="https://github.com/trentm/node-bunyan/issues/216" target="_blank" rel="noopener">https://github.com/trentm/node-bunyan/issues/216</a></p><p><code>ERROR Plugin load failed: hexo-renderer-sass</code></p><p>移除此模块，用<code>cnpm</code>指令重新安装<br><a href="http://www.rockcoding.com/2016/03/02/hexo/" target="_blank" rel="noopener">http://www.rockcoding.com/2016/03/02/hexo/</a><br><a href="https://chenyiqiao.gitbooks.io/documentation_for_npm/content/install_packages.html" target="_blank" rel="noopener">https://chenyiqiao.gitbooks.io/documentation_for_npm/content/install_packages.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随笔-Hexo-升级&quot;&gt;&lt;a href=&quot;#随笔-Hexo-升级&quot; class=&quot;headerlink&quot; title=&quot;随笔 Hexo 升级&quot;&gt;&lt;/a&gt;随笔 Hexo 升级&lt;/h1&gt;&lt;p&gt;最近在将&lt;code&gt;hexo&lt;/code&gt;升级到6.2.0的过生成中遇到了一些小问题，虽然正常功能都能使用，但在你debug的时候&lt;br&gt;终端上跳出那么几个扎眼的颜色总是不是那么狠舒服。对于我这种完美主义者必然要将其抹杀。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://keleyundou.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="http://keleyundou.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之正则入门</title>
    <link href="http://keleyundou.github.io/2016/07/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E6%AD%A3%E5%88%99%E5%85%A5%E9%97%A8/"/>
    <id>http://keleyundou.github.io/2016/07/iOS开发之正则入门/</id>
    <published>2016-07-28T09:15:47.000Z</published>
    <updated>2016-07-29T03:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><code>&#39;^&#39;</code> 、<code>&#39;$&#39;</code> 分别表示匹配字符串的开始和结束</li></ul><p>eg: <code>&quot;^one&quot;</code></p><blockquote><p>以one开头的字符串</p></blockquote><p>eg: <code>&quot;two$&quot;</code></p><blockquote><p>以two结尾的字符串</p></blockquote><p>eg: <code>&quot;^apple$&quot;</code></p><blockquote><p>以<code>apple</code>开头和结尾的字符串</p></blockquote><p>eg: <code>&quot;banana&quot;</code></p><blockquote><p>表示包含<code>banana</code>的字符串</p></blockquote><a id="more"></a><ul><li><code>&#39;*&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;?&#39;</code> 分别表示[0, +∞), [1, +∞), [0,1]</li></ul><p>eg: <code>&quot;ab*&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>其后跟着零或多个<code>b</code></p></blockquote><p>eg: <code>&quot;ab+&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>其后跟着一或多个<code>b</code></p></blockquote><p>eg: <code>&quot;ab?&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>其后跟着零或多个<code>b</code></p></blockquote><p>eg: <code>&quot;a?b+$&quot;</code></p><blockquote><p>字符串中的结尾最多有一个<code>a</code>且其后跟着至少有一个<code>b</code></p></blockquote><ul><li><code>&#39;{}&#39;</code> 表示一个重复的范围</li></ul><p>eg: <code>&quot;ab{4}&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>其后跟着4个<code>b</code></p></blockquote><p>eg: <code>&quot;ab{1,}&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>其后跟着至少一个<code>b</code></p></blockquote><p>eg: <code>&quot;ab{3,4}&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>其后跟着3到4个<code>b</code></p></blockquote><hr><blockquote><p>PS:</p></blockquote><blockquote><p><code>&#39;*&#39;</code> === {0, +∞}</p></blockquote><blockquote><p><code>&#39;+&#39;</code> === {1, +∞}</p></blockquote><blockquote><p><code>&#39;?&#39;</code> === {0, 1}</p></blockquote><hr><ul><li><code>&#39;|&#39;</code> 表示或</li></ul><p>eg: <code>&quot;a|b&quot;</code></p><blockquote><p>字符串中存在<code>a</code>或<code>b</code>，两者不能同时存在</p></blockquote><p>eg: <code>&quot;(a|bcd)ef&quot;</code></p><blockquote><p>表示”aef”或”bcdef”</p></blockquote><p>eg: <code>&quot;(a|b)*c&quot;</code></p><blockquote><p>字符串中混有零或多个<code>a</code> <code>b</code>，紧跟<code>c</code></p></blockquote><ul><li><code>&#39;[]&#39;</code> 表示方括号内选择1-N个符合语法的字符有且仅选一个</li></ul><p>eg: <code>&quot;[ab]&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>或<code>b</code> === “a|b”</p></blockquote><p>eg: <code>&quot;[a-d]&quot;</code></p><blockquote><p>字符串中含有一个<code>a</code>到<code>d</code>的字母</p></blockquote><p>eg: <code>&quot;^[a-zA-Z]&quot;</code></p><blockquote><p>字符串已字母开头</p></blockquote><p>eg: <code>&quot;[0-9]a&quot;</code></p><blockquote><p>字母<code>a</code>的前面含有一个数字</p></blockquote><p>eg: <code>&quot;[a-zA-Z0-9]$&quot;</code></p><blockquote><p>字符串以一个字母数字结束</p></blockquote><ul><li><code>&#39;.&#39;</code> 表示匹配除换行（\r\n）之外的单个字符</li></ul><p>eg: <code>&quot;a.[a-z]&quot;</code></p><blockquote><p>字符串中有一个<code>a</code>后面跟着一个任意字符和一个小写字母</p></blockquote><p>eg: <code>&quot;^.{5}$&quot;</code></p><blockquote><p>任意一个长度为5的字符串</p></blockquote><ul><li><code>&#39;\num&#39;</code> 表示<code>&quot;\num&quot;</code>之前的字符重复的个数，其中<code>num</code>表示一个正整数，</li></ul><p>eg: <code>&quot;(.)|1&quot;</code></p><blockquote><p>2个连续的相同字符???</p></blockquote><p>eg: <code>&quot;10\{1,2}&quot;</code></p><blockquote><p>数字1后面跟着1或2个0</p></blockquote><p>eg: <code>&quot;0\{3,}&quot;</code></p><blockquote><p>数字0后面跟着3或更多的0</p></blockquote><ul><li><code>[^x]</code> 表示不期望出现的一个字符(x)</li></ul><p>eg: <code>&quot;@[^a-zA-Z]@&quot;</code></p><blockquote><p>两个<code>@</code>中不希望出现字母</p></blockquote><ul><li><code>&#39;\d&#39;</code> 匹配一个数字字符 === [0-9]</li><li><code>&#39;\D&#39;</code> 匹配一个非数字字符 === [^0-9]</li><li><code>&#39;\w&#39;</code> 匹配字母数字下划线 === [a-zA-Z0-9_]</li><li><code>&#39;\W&#39;</code> 匹配非字母数字下划线汉字</li></ul><hr><blockquote><p>Reference</p><p><a href="http://www.admin10000.com/document/5944.html" target="_blank" rel="noopener">http://www.admin10000.com/document/5944.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;^&amp;#39;&lt;/code&gt; 、&lt;code&gt;&amp;#39;$&amp;#39;&lt;/code&gt; 分别表示匹配字符串的开始和结束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;^one&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以one开头的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;two$&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以two结尾的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;^apple$&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以&lt;code&gt;apple&lt;/code&gt;开头和结尾的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;banana&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表示包含&lt;code&gt;banana&lt;/code&gt;的字符串&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="正则" scheme="http://keleyundou.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>iOS8 App Groups 数据共享</title>
    <link href="http://keleyundou.github.io/2016/04/iOS8-App-Groups-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
    <id>http://keleyundou.github.io/2016/04/iOS8-App-Groups-数据共享/</id>
    <published>2016-04-15T06:09:44.000Z</published>
    <updated>2016-04-15T06:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，APP之间很难直接通信，即便是<code>AppExtension</code> 与<code>host App</code> 之间也不能直接通信。事无绝对，APP之间的数据共享有2种方法：</p><ul><li>KeyChain</li><li>App Groups</li></ul><p>下面我们就讲讲如何通过<code>App Groups</code>这个功能进行APP之间通信的。<br><a id="more"></a></p><h2 id="Step-1-创建一个工程"><a href="#Step-1-创建一个工程" class="headerlink" title="Step 1 创建一个工程"></a>Step 1 创建一个工程</h2><p>用<code>Xcode</code>创建<code>Single View Application</code>下的一个工程，工程名是<code>CBAppGroupSimeple</code>。如图：</p><p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B618%E5%88%8620%E7%A7%92.png" width="400" alt="创建工程"><br></p><h2 id="Step-2-添加AppGroup"><a href="#Step-2-添加AppGroup" class="headerlink" title="Step 2 添加AppGroup"></a>Step 2 添加<code>AppGroup</code></h2><p>进入<code>Target</code>，选择<code>Capabilities</code> -&gt; <code>App Groups</code>（使用此功能的前提是具备开发者账号）。接下来，点击<code>+</code>添加一个唯一标识，例如：<code>group.xxx.xxx</code>，然后勾上左侧的复选框。如图：</p><p>图一：</p><p align="center"><br>&lt;img src=”<a href="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B645%E5%88%8607%E7%A7%92.png&quot;" target="_blank" rel="noopener">http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B645%E5%88%8607%E7%A7%92.png&quot;</a>, width=600 alt=”选择开发者账号”/&gt;<br></p><p>图二：</p><p align="center"><br>&lt;img src=”<a href="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B647%E5%88%8610%E7%A7%92.png&quot;" target="_blank" rel="noopener">http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B647%E5%88%8610%E7%A7%92.png&quot;</a>, width=400 alt=”添加group”/&gt;<br></p><h2 id="Step-3-共享数据"><a href="#Step-3-共享数据" class="headerlink" title="Step 3 共享数据"></a>Step 3 共享数据</h2><p>在实现此功能前，我们先简单布局一下<code>UI</code>。往<code>Storyboard</code>上添加一个<code>UITextField</code>和一个<code>UIButton</code>。给<code>UIButton</code>添加一个点击事件<code>saveAction:</code>。具体代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)saveAction:(<span class="keyword">id</span>)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *userDefaults = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@"group.colabean.simeple.appgroup"</span>];</span><br><span class="line">    </span><br><span class="line">    [userDefaults setObject:<span class="keyword">self</span>.inputTextField.text forKey:<span class="string">@"kCBSharedData"</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Run</code>一下工程，输入一些数据，点击<code>Save</code>按钮。</p><h2 id="Step-4-获取共享的数据"><a href="#Step-4-获取共享的数据" class="headerlink" title="Step 4 获取共享的数据"></a>Step 4 获取共享的数据</h2><p>我们重复<code>Step 1</code>，<code>Step 2</code>，创建另一个<code>Simple</code>，工程名是<code>CBAppGroupOtherSimple</code>，添加<code>AppGroup</code>并将上一个工程中创建的唯一标识（<code>group.colabean.simeple.appgroup</code>）勾上。</p><p>在我们的<code>viewDidLoad:</code>中获取共享的数据，代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *userDefaults = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@"group.colabean.simeple.appgroup"</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *content = [userDefaults objectForKey:<span class="string">@"kCBSharedData"</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"shared data: %@"</span>, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Run</code>一下工程，将会立即获取到从<code>CBAppGroupSimple</code>工程中共享的数据。如图：</p><p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2012%E6%97%B610%E5%88%8658%E7%A7%92.png" width="500" alt="打印结果"><br></p><p>就是这么简单任性。</p><p><a href="https://github.com/keleyundou/ColaBeanSimple/tree/master/App%20Groups" target="_blank" rel="noopener">DownLoadSimple</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="http://www.theappguruz.com/blog/ios8-app-groups" target="_blank" rel="noopener">http://www.theappguruz.com/blog/ios8-app-groups</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，APP之间很难直接通信，即便是&lt;code&gt;AppExtension&lt;/code&gt; 与&lt;code&gt;host App&lt;/code&gt; 之间也不能直接通信。事无绝对，APP之间的数据共享有2种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KeyChain&lt;/li&gt;
&lt;li&gt;App Groups&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们就讲讲如何通过&lt;code&gt;App Groups&lt;/code&gt;这个功能进行APP之间通信的。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="Tutorial" scheme="http://keleyundou.github.io/tags/Tutorial/"/>
    
      <category term="AppGroups" scheme="http://keleyundou.github.io/tags/AppGroups/"/>
    
  </entry>
  
  <entry>
    <title>译：实现Twitter UI效果</title>
    <link href="http://keleyundou.github.io/2016/03/%E5%AE%9E%E7%8E%B0Twitter-UI%E6%95%88%E6%9E%9C/"/>
    <id>http://keleyundou.github.io/2016/03/实现Twitter-UI效果/</id>
    <published>2016-03-29T17:49:11.000Z</published>
    <updated>2016-04-01T12:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用<code>Twitter</code>的APP后，我已开发者的视觉并注意到整体与部分之间相互协调是件极其有意思的事情。这引起了我的好奇心：这是怎么做到的？</p><p>让我们具体地讨论下这个视图布局：此效果不优雅吗？它看起开就像本应如此，但你仔细的观察后就会发现更多。随着<code>Scrollview</code>的偏移，图层的覆盖，动作和比例缩放是那么的平滑连贯… … 实在是太喜欢这个效果了。</p><p>So，就让我们立刻实现这个效果吧。</p><p>首先，先看下最终效果：</p><p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/colabeanTwitterProfile.gif" width="375" height="667"><br></p><a id="more"></a><h3 id="结构描述"><a href="#结构描述" class="headerlink" title="结构描述"></a>结构描述</h3><hr><p>在写代码之前，我想给你一个关于如何构建UI的简单意见。</p><p>打开<code>Main.storyboard</code>文件，在这个控制器里面你会发现2个主要的对象。第一个是一个呈现<code>Header</code>的视图，第二个是<code>Scrollview</code>，它包含了<code>Avatar</code>和账号相关的其他信息，如：<code>username</code>标签和<code>Follow</code>按钮。还有一个被叫做<code>Sizer</code>的视图，它是为了确保<code>Scrollview</code>拥有足够大的垂直滑动的空间。</p><p>就像你看到的那样，这个结构非常的简单。稍微注意一下就可发现<code>Header</code>的外部放置了一个<code>Scrollview</code>，而不是与其他元素放置在一起。虽然没必严格如此，但这样会使它的结构变动更加灵活。</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><hr><p>如果你仔细的看了最后的动画，将会注意到你要管理2个不同的动作：</p><ol><li>向下拉（当<code>Scrollview</code>已经停靠在屏幕的顶部的时候）</li><li>上下滑动</li></ol><p>第二个动作可以细分为4个小步骤：</p><ul><li>向上滑动，一直到导航条默认的大小并停靠在屏幕的顶部。</li><li>向上滑动，<code>Avatar</code>开始逐渐变小。</li><li>当<code>Header</code>被固定后，<code>Avatar</code>会移动到它的下边。</li><li>当<code>username</code>标签抵达<code>Header</code>的顶部时，一个新的白色<code>Label</code>将会从<code>Header</code>中心的底部展现。这时<code>Header</code>的背景图片将会用高斯模糊渲染。</li></ul><p>打开<code>ViewController</code>让我们一个一个的实现这些步骤。</p><h3 id="构建管理者"><a href="#构建管理者" class="headerlink" title="构建管理者"></a>构建管理者</h3><hr><p>首先要做的事情很明显，就是获取关于<code>Scrollview</code>的偏移量<code>offset</code>。我们可以通过<code>UIScrollViewDelegate</code>协议实现<code>scrollViewDidScroll</code>方法。</p><p>在一个<code>View</code>上执行最简单地动画方式是使用<code>Core Animation</code>逐渐的进行三维变换，并给<code>layer.transform</code>赋予新值。</p><p>关于<code>Core Animation</code>可以参考这篇文章</p><p><a href="http://www.thinkandbuild.it/playing-around-with-core-graphics-core-animation-and-touch-events-part-1/" target="_blank" rel="noopener">http://www.thinkandbuild.it/playing-around-with-core-graphics-core-animation-and-touch-events-part-1/</a></p><p>这些是<code>scrollViewDidScroll:</code>方法的第一部分</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> offset = scrollView.contentOffset.y;</span><br><span class="line"><span class="built_in">CATransform3D</span> avatarTransform = <span class="built_in">CATransform3DIdentity</span>;</span><br><span class="line"><span class="built_in">CATransform3D</span> headerTransform = <span class="built_in">CATransform3DIdentity</span>;</span><br></pre></td></tr></table></figure><p>在这里我们获取一个当前垂直偏移量<code>offset</code>，并初始化2个<code>CATransform3D</code>变量。</p><h3 id="下拉"><a href="#下拉" class="headerlink" title="下拉"></a>下拉</h3><hr><p>下拉动作的管理：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">CGFloat</span> headerScaleFactor = -(offset) / header.bounds.size.height;</span><br><span class="line">        <span class="built_in">CGFloat</span> headerSizevariation = (header.bounds.size.height * (<span class="number">1.0</span> + headerScaleFactor) - header.bounds.size.height) / <span class="number">2.0</span>;</span><br><span class="line">        headerTransform = <span class="built_in">CATransform3DTranslate</span>(headerTransform, <span class="number">0</span>, headerSizevariation, <span class="number">0</span>);</span><br><span class="line">        headerTransform = <span class="built_in">CATransform3DScale</span>(headerTransform, <span class="number">1.0</span> + headerScaleFactor, <span class="number">1.0</span> + headerScaleFactor, <span class="number">0</span>);</span><br><span class="line">        header.layer.transform = headerTransform;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先，我们检查<code>offset</code>是否为负数：用户在下拉的过程中，将会进入<code>Scrollview</code>的弹性区域。</p><p>剩下的代码就是简单的数学逻辑。</p><p><code>Header</code>的扩大是因为它的上边缘固定于屏幕的顶部，而底部的图片在等比缩放。</p><p><code>the transformation is made by scaling and subsequently translating to the top for a value equal to the size variation of the view.</code>实际上，移动<code>ImageView</code>图层的中点到顶部并同时缩放它，你可以获得相同的效果。</p><p align="center"> <img src="http://www.thinkandbuild.it/wp-content/uploads/2015/01/ImageScale.png"></p><p><code>headerScaleFactor</code>是用来被计算的一部分。我们想用<code>offset</code>适当的对<code>Header</code>进行缩放。换句话说，当<code>offset</code>是<code>Header</code>高度的2倍时，<code>headerScaleFactor</code>必须是2.0。</p><p>我们需要管理的第二个动作是上下滑动。让我们看看，如何一步步通过UI的主要元素完成变换的。</p><h3 id="头部（第一阶段）"><a href="#头部（第一阶段）" class="headerlink" title="头部（第一阶段）"></a>头部（第一阶段）</h3><hr><p>当前的<code>offset</code>应该大于0。<code>Header</code>应该随<code>offset</code>进行垂直变换，直到它期望的高度（我们后面将会讲解<code>Header</code>的高斯模糊）。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headerTransform = <span class="built_in">CATransform3DTranslate</span>(headerTransform, <span class="number">0</span>, MAX(-offset_HeaderStop, -offset), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这句代码非常简单。我们只需定义一个让<code>Header</code>在此停止移动的最小值。</p><p>让我感到羞愧的是我比较懒！所以我写死了一些数值，像<code>offset_HeaderStop</code>。其实，我们可以通过计算UI元素的位置来获取相同的效果。下次有空再改吧。</p><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><hr><p><code>Avatar</code>的缩放与我们处理下拉的逻辑一样，只是在这种情况下，图片是到达底部而不是顶部。这段代码和上边的比较相似，除了减小缩放的比例为1.4。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Avatar -----------</span></span><br><span class="line"><span class="built_in">CGFloat</span> avatarScaleFactor = MIN(offset_HeaderStop, offset) / avatarImage.bounds.size.height / <span class="number">1.4</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> avatarSizevariation = (avatarImage.bounds.size.height * (<span class="number">1.0</span> + avatarScaleFactor) - avatarImage.bounds.size.height) / <span class="number">2.0</span>;</span><br><span class="line">avatarTransform = <span class="built_in">CATransform3DTranslate</span>(avatarTransform, <span class="number">0</span>, avatarSizevariation, <span class="number">0</span>);</span><br><span class="line">avatarTransform = <span class="built_in">CATransform3DScale</span>(avatarTransform, <span class="number">1.0</span>-avatarScaleFactor, <span class="number">1.0</span>-avatarScaleFactor, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>就像你看到的，当<code>Header</code>停止变化时，我们用<code>MIN</code>函数来使<code>Avatar</code>的缩放停止。</p><p>此时，我们根据当前<code>offset</code>设置最顶层的图层。除非<code>offset</code>小于等于<code>offset_HeaderStop</code>，最顶层的图层是<code>Avatar</code>，否则是<code>Header</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (offset &lt;= offset_HeaderStop) &#123;</span><br><span class="line">            <span class="keyword">if</span> (avatarImage.layer.zPosition &lt; header.layer.zPosition) &#123;</span><br><span class="line">                header.layer.zPosition = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (avatarImage.layer.zPosition &gt;= header.layer.zPosition) &#123;</span><br><span class="line">                header.layer.zPosition = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="白色Label"><a href="#白色Label" class="headerlink" title="白色Label"></a>白色Label</h3><hr><p>这段代码是白色<code>Label</code>的动画：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ------------ Label</span></span><br><span class="line"><span class="built_in">CATransform3D</span> labelTransform = <span class="built_in">CATransform3DMakeTranslation</span>(<span class="number">0</span>, MAX(-distance_W_LabelHeader, offset_B_LabelHeader - offset), <span class="number">0</span>);</span><br><span class="line">headerLabel.layer.transform = labelTransform;</span><br></pre></td></tr></table></figure><p>这里有2个令我感到羞愧的变量值：当<code>offset</code>等于<code>offset_B_LabelHeader</code>时，黑色的<code>username</code>标签刚到触碰到<code>Header</code>的底部。</p><p align="center"><br><img src="http://www.thinkandbuild.it/wp-content/uploads/2015/01/shame1.png"><br></p><p><code>distance_W_LabelHeader</code>是<code>Header</code>底部与白色<code>Label</code>终点之间的距离。</p><p align="center"><br><img src="http://www.thinkandbuild.it/wp-content/uploads/2015/01/shame2.png"><br></p><p>这个变换是通过此逻辑计算：黑色<code>Label</code>触碰到<code>Header</code>，白色<code>Label</code>就会立即出现，并且到达<code>Header</code>中点位置就停止移动。所以我们使用下面代码创建<code>Y</code>值：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAX(-distance_W_LabelHeader, offset_B_LabelHeader - offset)</span><br></pre></td></tr></table></figure><h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h3><hr><p>最后一个效果是<code>Header</code>的模糊。为了得到合适的解决方案，我用了3个不同的库… … 我也尝试过用<code>OpenGL ES</code>创建基类，但实时更新模糊总是非常缓慢。</p><p>然后我意识到我可以对模糊仅仅计算一次，将不模糊和模糊的图片进行重叠，只是改变<code>alpha</code>值。我非常确信，<code>Twitter</code>就是这样做的。</p><p>在<code>viewDidAppear</code>中，我们计算<code>Header</code>的模糊值并隐藏它，设置<code>alpha</code>值为0。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Header - Blurred Image</span></span><br><span class="line">headerBlurImageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:header.bounds];</span><br><span class="line">headerBlurImageView.image = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"header_bg"</span>] blurredImageWithRadius:<span class="number">10</span> iterations:<span class="number">20</span> tintColor:[<span class="built_in">UIColor</span> clearColor]];</span><br><span class="line">headerBlurImageView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</span><br><span class="line">headerBlurImageView.alpha = <span class="number">0.0</span>;</span><br><span class="line">[header insertSubview:headerBlurImageView belowSubview:headerLabel];</span><br><span class="line">header.clipsToBounds = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure><p>模糊视图是用过<a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="noopener"><code>FXBlurView</code></a>实现的。</p><p>在<code>scrollViewDidScroll:</code>方法中，我们只需根据<code>offset</code>设置<code>alpha</code>:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ------------ Blur</span></span><br><span class="line">headerBlurImageView.alpha = MIN(<span class="number">1.0</span>, (offset - offset_B_LabelHeader) / distance_W_LabelHeader);</span><br></pre></td></tr></table></figure><p>这个计算的背后逻辑是：<code>alpha</code>最大值是1，当黑色<code>Label</code>触碰到<code>Header</code>时模糊效果开始出现，当白色到达最终位置时，也将停止继续模糊。</p><p>就这样！</p><p>我希望你喜欢这个教程。学习如何重现这种很棒的动画效果对我来说是很大的乐趣。</p><blockquote><p>Swift代码：<a href="https://github.com/ariok/TB_TwitterUI" target="_blank" rel="noopener"><strong>Download Source</strong></a><br>OC代码: <a href="https://github.com/ariok/TB_TwitterUI" target="_blank" rel="noopener"><strong>Download Source</strong></a></p></blockquote><hr><blockquote><p>原版：<a href="http://www.thinkandbuild.it/implementing-the-twitter-ios-app-ui/" target="_blank" rel="noopener">IMPLEMENTING THE TWITTER IOS APP UI</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用&lt;code&gt;Twitter&lt;/code&gt;的APP后，我已开发者的视觉并注意到整体与部分之间相互协调是件极其有意思的事情。这引起了我的好奇心：这是怎么做到的？&lt;/p&gt;
&lt;p&gt;让我们具体地讨论下这个视图布局：此效果不优雅吗？它看起开就像本应如此，但你仔细的观察后就会发现更多。随着&lt;code&gt;Scrollview&lt;/code&gt;的偏移，图层的覆盖，动作和比例缩放是那么的平滑连贯… … 实在是太喜欢这个效果了。&lt;/p&gt;
&lt;p&gt;So，就让我们立刻实现这个效果吧。&lt;/p&gt;
&lt;p&gt;首先，先看下最终效果：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7pn4xs.com1.z0.glb.clouddn.com/colabeanTwitterProfile.gif&quot; width=&quot;375&quot; height=&quot;667&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="Tutorial" scheme="http://keleyundou.github.io/tags/Tutorial/"/>
    
      <category term="iOS" scheme="http://keleyundou.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
