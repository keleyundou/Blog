<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ColaBean&#39;s Blog</title>
  <subtitle>苟有恒何必三更睡五更起，最无益莫过一日曝十日寒。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://keleyundou.github.io/"/>
  <updated>2017-08-18T09:12:45.000Z</updated>
  <id>http://keleyundou.github.io/</id>
  
  <author>
    <name>ColaBean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to use PlistBuddy</title>
    <link href="http://keleyundou.github.io/2017/08/18/How-to-use-PlistBuddy/"/>
    <id>http://keleyundou.github.io/2017/08/18/How-to-use-PlistBuddy/</id>
    <published>2017-08-18T08:19:36.000Z</published>
    <updated>2017-08-18T09:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PlistBuddy"><a href="#PlistBuddy" class="headerlink" title="PlistBuddy"></a>PlistBuddy</h2><p>一个plist文件操作工具。记录下方便以后使用，常用以下4个方法：</p>
<ul>
<li><em>Add</em> 添加</li>
<li><em>Delete</em> 删除</li>
<li><em>Set</em> 更新</li>
<li><em>Print</em> 读取</li>
<li>…</li>
</ul>
<a id="more"></a>
<p>更多方法可 <code>--help</code>， 以上具体使用方法如下：</p>
<h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><ul>
<li>添加一个<code>key</code>:<code>code</code> <code>value</code>:<code>404</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :code integer 404"</span> t1.plist</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dict &#123;</div><div class="line">    code = 404</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>添加<code>Array</code>，先创建一个数组变量<code>list</code>, 然后往<code>list</code>中添加数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :list Array"</span> t1.plist</div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :list: string a1"</span> t1.plist</div><div class="line"><span class="comment"># 根据索引插入值</span></div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :list:0 string a2"</span> t1.plist</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Dict &#123;</div><div class="line">    list = Array &#123;</div><div class="line">        a2</div><div class="line">        a1</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>添加<code>Dict</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result Dict"</span> t1.plist</div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:name string Tom"</span> t1.plist</div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:age integer 18"</span> t1.plist</div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:list Array"</span> t1.plist</div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Add :result:list: string aa"</span> t1.plist</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Dict &#123;</div><div class="line">    result = Dict &#123;</div><div class="line">        age = 18</div><div class="line">        list = Array &#123;</div><div class="line">            aa</div><div class="line">        &#125;</div><div class="line">        name = Tom</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><ul>
<li>根据<code>key</code>删除 对应的<code>value</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy <span class="string">"Delete :code"</span> t1.plist</div></pre></td></tr></table></figure>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul>
<li>根据<code>key</code>更新<code>value</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy <span class="string">"Set :code 200"</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Dict &#123;</div><div class="line">    code = 200</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h3><ul>
<li>根据<code>key</code>读取<code>value</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy <span class="string">"Print"</span> t1.plist</div><div class="line">/usr/libexec/PlistBuddy <span class="string">"Print :code"</span> t1.plist</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># t1.plist</span></div><div class="line">Dict &#123;</div><div class="line">    result = Dict &#123;</div><div class="line">        age = 18</div><div class="line">        list = Array &#123;</div><div class="line">            aa</div><div class="line">        &#125;</div><div class="line">        name = Tom</div><div class="line">    &#125;</div><div class="line">    code = 200</div><div class="line">    list = Array &#123;</div><div class="line">        a2</div><div class="line">        a1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment"># code</span></div><div class="line">200</div></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/keleyundou/blog_demo_repo/tree/master/PlistBuddy" target="_blank" rel="external">Demo</a></p>
<!--
 http://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/
 http://www.jianshu.com/p/2167f755c47e
 -->
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PlistBuddy&quot;&gt;&lt;a href=&quot;#PlistBuddy&quot; class=&quot;headerlink&quot; title=&quot;PlistBuddy&quot;&gt;&lt;/a&gt;PlistBuddy&lt;/h2&gt;&lt;p&gt;一个plist文件操作工具。记录下方便以后使用，常用以下4个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Add&lt;/em&gt; 添加&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Delete&lt;/em&gt; 删除&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set&lt;/em&gt; 更新&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Print&lt;/em&gt; 读取&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="PlistBuddy" scheme="http://keleyundou.github.io/tags/PlistBuddy/"/>
    
      <category term="shell" scheme="http://keleyundou.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Dispatch Semaphore</title>
    <link href="http://keleyundou.github.io/2017/08/15/Dispatch-Semaphore/"/>
    <id>http://keleyundou.github.io/2017/08/15/Dispatch-Semaphore/</id>
    <published>2017-08-15T08:18:16.000Z</published>
    <updated>2017-08-16T04:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><!-- 创建一个并发控制来同步任务和有限资源访问，换句话说，就是控制并发的线程数量。 -->
<p><strong>信号量</strong>（英语：<code>Semaphore</code>）又称为 <strong>信号量</strong> 、<strong>旗语</strong>，是一个同步对象，用于保持在0至指定最大值之间的一个计数值。当线程完成一次对该<code>semaphore</code>对象等待（wait）时，该计数值减1；当线程完成一次对<code>semaphore</code>对象释放时，计数值加1。当计数值为0时，则线程等待该<code>semaphore</code>对象不再能成功直至该<code>semaphore</code>对象变成signaled状态。<code>semaphore</code>对象的计数值大于0，为signaled状态；计数值等于0，为nonsignaled状态。<br><code>semaphore</code>对象适用于控制一个仅支持有限个用户的共享资源。是一种不需要使用<code>busy waiting</code>的一种方法。—— 维基百科</p>
<a id="more"></a>
<h3 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h3><p>为了方便理解<code>semaphore</code>，找到一个经典案例：停车场问题</p>
<p>假设停车场只有三个车位，一开始三个车位都是空的。这时如果同时来了五辆车，看门人允许其中三辆不受阻碍的进入，然后放下车拦，剩下的车则必须在入口等待，此后来的车也都不得不在入口处等待。这时，有一辆车离开停车场，看门人得知后，打开车拦，放入一辆，如果又离开两辆，则又可以放入两辆，如此往复。</p>
<p>在这个停车场系统中，车位是公共资源，每辆车好比一个线程，看门人起的就是信号量的作用。</p>
<p>更进一步，信号量的特性如下：信号量是一个非负整数（车位数），所有通过它的线程（车辆）都会将该整数减一（通过它当然是为了使用资源），当该整数值为零时，所有试图通过它的线程都将处于等待状态。在信号量上我们定义两种操作： Wait（等待） 和 Signal（释放）。 当一个线程调用Wait（等待）操作时，它要么通过然后将信号量减一，要么一直等下去，直到信号量大于一或超时。Signal（释放）实际上是在信号量上执行加操作，对应于车辆离开停车场，该操作之所以叫做“释放”是因为加操作实际上是释放了由信号量守护的资源。</p>
<h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>当并行执行的处理更新数据时，会产生数据不一致的情况，有时程序还会异常结束。虽然使用<code>Serial Dispatch Queue</code>和<code>dispatch_barrier_async</code>函数可以避免此类问题，但有必要进行更细粒度的排他控制。例如下面这种情况，将所有数据追加到<code>NSMutableArray</code>中。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line">  <span class="built_in">NSMutableArray</span> *buffer = @[].mutableCopy;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">      <span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">          [buffer addObject:@(i)];</div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>因为此段代码使用<code>Global Dispatch Queue</code>更新<code>NSMutableArray</code>类对象，所以执行后由于内存错误导致程序异常结束的概率很高。此时应使用<code>Dispatch Semaphore</code>。</p>
<p><code>semaphore</code> 相关函数</p>
<ul>
<li><p>dispatch_semaphore_create</p>
<blockquote>
<p>创建一个信号的总量 参数是一个整数，表示初始值</p>
</blockquote>
</li>
<li><p>dispatch_semaphore_signal</p>
<blockquote>
<p>发送一个信号，使信号总量+1</p>
</blockquote>
</li>
<li><p>dispatch_semaphore_wait</p>
<blockquote>
<p>等待一个信号，使信号总量-1，当信号总量&lt;0时，会一直等待阻塞线程，直到信号量再次大于0的时候再执行</p>
</blockquote>
</li>
</ul>
<p>在前面的代码片段中使用<code>Dispatch Semaphore</code>看看。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line">  dispatch_semaphore_t dsema = dispatch_semaphore_create(<span class="number">1</span>);</div><div class="line">  <span class="built_in">NSMutableArray</span> *buffer = @[].mutableCopy;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">      <span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">          dispatch_semaphore_wait(dsema, DISPATCH_TIME_FOREVER);</div><div class="line">          [buffer addObject:@(i)];</div><div class="line">          dispatch_semaphore_signal(dsema);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p>改变某个变量值</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line">  dispatch_semaphore_t dsema = dispatch_semaphore_create(<span class="number">1</span>);</div><div class="line">  __block <span class="keyword">int</span> sum = <span class="number">1000</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">      <span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">          dispatch_semaphore_wait(dsema, DISPATCH_TIME_FOREVER);</div><div class="line">          <span class="keyword">int</span> value = arc4random()%<span class="number">4</span> + <span class="number">5</span>;</div><div class="line">          <span class="built_in">NSLog</span>(<span class="string">@"%d-%d = %d"</span>,sum,value, sum-value);</div><div class="line">          sum=sum-value;</div><div class="line">          dispatch_semaphore_signal(dsema);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>根据打印的日志看看效果</p>
<ul>
<li>未使用信号量操作</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910625</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910640</span>] <span class="number">1000</span><span class="number">-5</span> = <span class="number">995</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910626</span>] <span class="number">1000</span><span class="number">-6</span> = <span class="number">994</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910628</span>] <span class="number">1000</span><span class="number">-5</span> = <span class="number">995</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910711</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910713</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910712</span>] <span class="number">1000</span><span class="number">-7</span> = <span class="number">993</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910714</span>] <span class="number">1000</span><span class="number">-6</span> = <span class="number">994</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910625</span>] <span class="number">993</span><span class="number">-7</span> = <span class="number">986</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">36.623</span> RTDispatchQueue[<span class="number">90207</span>:<span class="number">16910715</span>] <span class="number">993</span><span class="number">-5</span> = <span class="number">988</span></div></pre></td></tr></table></figure>
<ul>
<li>使用信号量操作</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.994</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908711</span>] <span class="number">1000</span><span class="number">-6</span> = <span class="number">994</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908695</span>] <span class="number">994</span><span class="number">-5</span> = <span class="number">989</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908697</span>] <span class="number">989</span><span class="number">-7</span> = <span class="number">982</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908694</span>] <span class="number">982</span><span class="number">-5</span> = <span class="number">977</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908962</span>] <span class="number">977</span><span class="number">-8</span> = <span class="number">969</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.995</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908963</span>] <span class="number">969</span><span class="number">-6</span> = <span class="number">963</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908964</span>] <span class="number">963</span><span class="number">-6</span> = <span class="number">957</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908965</span>] <span class="number">957</span><span class="number">-6</span> = <span class="number">951</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908711</span>] <span class="number">951</span><span class="number">-8</span> = <span class="number">943</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">04</span>:<span class="number">07.996</span> RTDispatchQueue[<span class="number">90159</span>:<span class="number">16908966</span>] <span class="number">943</span><span class="number">-8</span> = <span class="number">935</span></div></pre></td></tr></table></figure>
<h4 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h4><p>顺序执行task</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</div><div class="line">dispatch_semaphore_t dsema = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"process: %d"</span>, i);</div><div class="line">    &#125;</div><div class="line">    dispatch_semaphore_signal(dsema);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"wait..."</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--&gt;%ld"</span>, dispatch_semaphore_wait(dsema, DISPATCH_TIME_FOREVER));</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"finish."</span>);</div></pre></td></tr></table></figure>
<p>打印日志如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">58.401</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] start</div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">58.401</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] wait...</div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">00.968</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">0</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">01.973</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">1</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">02.979</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">2</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">03.985</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">3</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">04.990</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383061</span>] process: <span class="number">4</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">04.991</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] --&gt;<span class="number">0</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">04.991</span> RTDispatchQueue[<span class="number">8269</span>:<span class="number">383018</span>] finish.</div></pre></td></tr></table></figure>
<p>因为信号总量是0 在执行到<code>dispatch_semaphore_wait</code>时 wait 使信号量-1，并不会返回结果值，「猜测：wait内部」处于等待状态（当前及后面的语句处于阻塞状态），直到触发signal，使信号量+1，继续执行wait语句及后面的语句</p>
<hr>
<p>Reference:</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E8%99%9F%E6%A8%99" target="_blank" rel="external">维基百科-信号量</a></li>
<li><a href="https://pan.baidu.com/s/1pKLEJl5" target="_blank" rel="external">Objective-C高级编程</a></li>
<li><a href="https://m.aliyun.com/yunqi/articles/30814?spm=5176.100239.0.0.lr2290" target="_blank" rel="external">GCD之信号量机制</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;信号量&quot;&gt;&lt;a href=&quot;#信号量&quot; class=&quot;headerlink&quot; title=&quot;信号量&quot;&gt;&lt;/a&gt;信号量&lt;/h3&gt;&lt;!-- 创建一个并发控制来同步任务和有限资源访问，换句话说，就是控制并发的线程数量。 --&gt;
&lt;p&gt;&lt;strong&gt;信号量&lt;/strong&gt;（英语：&lt;code&gt;Semaphore&lt;/code&gt;）又称为 &lt;strong&gt;信号量&lt;/strong&gt; 、&lt;strong&gt;旗语&lt;/strong&gt;，是一个同步对象，用于保持在0至指定最大值之间的一个计数值。当线程完成一次对该&lt;code&gt;semaphore&lt;/code&gt;对象等待（wait）时，该计数值减1；当线程完成一次对&lt;code&gt;semaphore&lt;/code&gt;对象释放时，计数值加1。当计数值为0时，则线程等待该&lt;code&gt;semaphore&lt;/code&gt;对象不再能成功直至该&lt;code&gt;semaphore&lt;/code&gt;对象变成signaled状态。&lt;code&gt;semaphore&lt;/code&gt;对象的计数值大于0，为signaled状态；计数值等于0，为nonsignaled状态。&lt;br /&gt;&lt;code&gt;semaphore&lt;/code&gt;对象适用于控制一个仅支持有限个用户的共享资源。是一种不需要使用&lt;code&gt;busy waiting&lt;/code&gt;的一种方法。—— 维基百科&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="GCD" scheme="http://keleyundou.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Tech sites</title>
    <link href="http://keleyundou.github.io/2017/08/09/Tech-sites/"/>
    <id>http://keleyundou.github.io/2017/08/09/Tech-sites/</id>
    <published>2017-08-09T07:00:38.000Z</published>
    <updated>2017-08-16T07:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="external">JavaScript Doc</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="external">Linux命令大全</a></li>
<li><a href="https://jaq.alibaba.com/community/category?spm=a313e.7916646.25000001.1.55489a7agFjyK2&amp;catid=4" target="_blank" rel="external">阿里聚安全</a></li>
<li><a href="http://nshipster.com/" target="_blank" rel="external">NSHipster</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ja
    
    </summary>
    
      <category term="Tech" scheme="http://keleyundou.github.io/categories/Tech/"/>
    
    
      <category term="Tech" scheme="http://keleyundou.github.io/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>APNs原理及环境搭建</title>
    <link href="http://keleyundou.github.io/2017/06/13/APNs%E5%8E%9F%E7%90%86%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://keleyundou.github.io/2017/06/13/APNs原理及环境搭建/</id>
    <published>2017-06-13T02:43:51.000Z</published>
    <updated>2017-06-13T03:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h1><p>推送在我们的生活中无处不在，下面就已开发者的角度来为你介绍其工作原理及如何搭建push server环境。<br>一款APP要想收到消息推送，有一个必要前提——配置推送证书。这里不在介绍如何配置推送证书。<br><a id="more"></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="server下发消息给APP"><a href="#server下发消息给APP" class="headerlink" title="server下发消息给APP"></a>server下发消息给APP</h3><p>Provider将消息推送给APNs，APNs将消息推送给Device，Device再将消息通知给APP。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/741964-e1810ee703aa2a38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="remote_notif_simple_2x.png"></p>
<h3 id="推送原理"><a href="#推送原理" class="headerlink" title="推送原理"></a>推送原理</h3><p>推送的前提是Device需向APNs发起注册注册，注册成功后APNs下发一个deviceToken给APP，APP再将其发送给Provider，当有要被推送的消息时，Provider会将消息结合deviceToken按指定的消息格式打包发送给APNs，然后由APNs推送给Device。</p>
<h4 id="deviceToken生成"><a href="#deviceToken生成" class="headerlink" title="deviceToken生成"></a>deviceToken生成</h4><p><img src="http://upload-images.jianshu.io/upload_images/741964-bdc4ff3b379c5bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="token_generation_2x.png"></p>
<ol>
<li>Device向APNs注册远程推送服务</li>
<li>APNs经过内部流程处理生成一个deviceToken，下发给Device</li>
<li>Device将获取到的deviceToken发送给Provider</li>
</ol>
<h4 id="推送过程"><a href="#推送过程" class="headerlink" title="推送过程"></a>推送过程</h4><p><img src="http://upload-images.jianshu.io/upload_images/741964-a406a6f2f707d0a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="token_trust_2x.png"></p>
<ol>
<li>APP链接APNs的过程中，APNs会验证deviceToken，链接成功后会维持一个TCP长连接</li>
<li>Provider将消息结合deviceToken封包发送给APNs</li>
<li>APNs将接收到的消息发送给deviceToken设备</li>
<li>设备再将收到的消息通知给APP</li>
</ol>
<h2 id="server搭建"><a href="#server搭建" class="headerlink" title="server搭建"></a>server搭建</h2><h3 id="合成PEM证书"><a href="#合成PEM证书" class="headerlink" title="合成PEM证书"></a>合成PEM证书</h3><p>命令行：</p>
<ul>
<li>生成公钥</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -in aps_development.cer -inform der -out PushPublicCert.pem</div></pre></td></tr></table></figure>
<ul>
<li>生成私钥</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -nocerts -out PushPrivateKey.pem -in Push.p12</div></pre></td></tr></table></figure>
<ul>
<li><p>将刚才生成的两个pem文件合成到一个文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat PushPublicCert.pem PushPrivateKey.pem &gt; ck.pem</div></pre></td></tr></table></figure>
</li>
<li><p>测试证书是否正常工作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet gateway.sandbox.push.apple.com 2195</div></pre></td></tr></table></figure>
</li>
<li><p>利用SSL证书和私钥来设置一个安全的链接去链接苹果服务器</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert PushPublicCert.pem -key PushPrivateKey.pem</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl s_client -connect api.push.apple.com:443 -cert PushPublicCert.pem -key PushPrivateKey.pem</div></pre></td></tr></table></figure>
<h3 id="server-code"><a href="#server-code" class="headerlink" title="server code"></a>server code</h3><p>旧：<br>开发环境：gateway.sandbox.push.apple.com:2195<br>发布环境：gateway.push.apple.com:2195</p>
<p>新：<br>开发环境：api.development.push.apple.com:443<br>发布环境：api.push.apple.com:443</p>
<p><a href="https://github.com/keleyundou/APNsProject" target="_blank" rel="external">Download_APNsProject</a></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以前仅知道原理，至于服务端如何与苹果服务器通信没有一点概念。于是利用闲暇时间翻阅资料写了篇关于APNs如何在服务端发送。争取不做口头的巨人行动的矮子（初中的时候班主任就时刻告诉我们这句话，现在基本上抛之脑后 冷汗！冷汗！）。目前只是整理了基于SSL协议的TCP长连接流通讯，HTTP/2后续会整理出来。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1" target="_blank" rel="external">AppleDoc——APNs</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;APNs&quot;&gt;&lt;a href=&quot;#APNs&quot; class=&quot;headerlink&quot; title=&quot;APNs&quot;&gt;&lt;/a&gt;APNs&lt;/h1&gt;&lt;p&gt;推送在我们的生活中无处不在，下面就已开发者的角度来为你介绍其工作原理及如何搭建push server环境。&lt;br&gt;一款APP要想收到消息推送，有一个必要前提——配置推送证书。这里不在介绍如何配置推送证书。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="APNs" scheme="http://keleyundou.github.io/tags/APNs/"/>
    
  </entry>
  
  <entry>
    <title>周刊◆第二期</title>
    <link href="http://keleyundou.github.io/2017/06/04/%E5%91%A8%E5%88%8A%E2%97%86%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
    <id>http://keleyundou.github.io/2017/06/04/周刊◆第二期/</id>
    <published>2017-06-04T14:56:30.000Z</published>
    <updated>2017-06-13T04:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐技术文章</p>
<ul>
<li><a href="http://www.jianshu.com/p/382593c3b24d" target="_blank" rel="external">开源IM工程“蘑菇街TeamTalk”的现状：一场有始无终的开源秀</a></li>
<li><a href="http://blog.makeex.com/2015/05/30/the-architecture-of-teamtalk-mac-client/" target="_blank" rel="external">TeamTalk 之 Mac 客户端架构分析</a></li>
<li><a href="http://www.jianshu.com/p/5559f838a7b1" target="_blank" rel="external">来自蘑菇街的开源IM：TeamTalk</a></li>
<li><a href="http://www.jianshu.com/p/1359165bae4e" target="_blank" rel="external">mac TeamTalk开发点点滴滴之一——DDLogic框架分解 - 刀哥的技术随笔</a></li>
<li><a href="http://www.jianshu.com/p/403ee06a584e" target="_blank" rel="external">iOS面试题大全-点亮你iOS技能树</a></li>
<li><a href="http://tech.glowing.com/cn/implement-kvo/" target="_blank" rel="external">如何自己动手实现 KVO</a></li>
<li><a href="http://www.cocoachina.com/industry/20130321/5862.html" target="_blank" rel="external">手把手教你做iOS推送</a></li>
<li><a href="http://www.cnblogs.com/zhouxihi/p/6422252.html" target="_blank" rel="external">自己动手搭建苹果推送Push服务器</a></li>
</ul>
<!-- [IOS学习笔记40——苹果推送机制APNs（一）](http://blog.csdn.net/ryantang03/article/details/8482259) -->
<!-- [APNs Overview](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1) -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐技术文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/382593c3b24d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源IM工程“蘑菇街TeamTalk”的现状：一场有始无终的开源秀&lt;/a&gt;&lt;
    
    </summary>
    
      <category term="开发周刊" scheme="http://keleyundou.github.io/categories/%E5%BC%80%E5%8F%91%E5%91%A8%E5%88%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>周刊◆第一期</title>
    <link href="http://keleyundou.github.io/2017/05/22/%E5%91%A8%E5%88%8A%E2%97%86%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>http://keleyundou.github.io/2017/05/22/周刊◆第一期/</id>
    <published>2017-05-22T02:27:16.000Z</published>
    <updated>2017-06-13T04:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐技术文章</p>
<ul>
<li><a href="https://techblog.toutiao.com/2017/03/28/fullscreen/" target="_blank" rel="external">iOS端一次视频全屏需求的实现</a></li>
<li><a href="http://www.52im.net/thread-228-1-1.html" target="_blank" rel="external">即时通讯音视频开发（一）：视频编解码之理论概述</a></li>
<li><a href="https://techblog.toutiao.com/2017/03/28/fullscreen/" target="_blank" rel="external">iOS端一次视频全屏需求的实现</a></li>
<li><a href="https://sdk.cn/news/5556" target="_blank" rel="external">从直播CDN的原理说起,谈如何解决延时和连麦的老难题?</a><!-- http://www.infoq.com/cn/presentations/how-to-solve-the-delay-and-mic-problem?utm_source=infoq&utm_campaign=user_page&utm_medium=link --></li>
<li><a href="http://www.infoq.com/cn/news/2014/07/cdn-for-mobile" target="_blank" rel="external">为什么CDN对移动客户端加速“没有”效果</a></li>
<li><a href="http://www.cnblogs.com/Unclefeng/p/6363152.html" target="_blank" rel="external">iOS-直播开发(开发从底层做起)</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=2653547042&amp;idx=1&amp;sn=26d8728548a6b5b657079eeab121e283&amp;scene=1&amp;srcid=0428msEitG9LJ3JaKGaRCEjg&amp;pass_ticket=CdMA9ZwxlVwo6NU4FLtW1wgLnWFyK3SF6pCUN70Abd7Q4YdSuvxvf03sg%2BrKmDvU#rd" target="_blank" rel="external">移动直播技术秒开优化经验</a></li>
<li><a href="http://www.jianshu.com/p/b142908f5a85" target="_blank" rel="external">Keychain介绍</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐技术文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techblog.toutiao.com/2017/03/28/fullscreen/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS端一次视频全屏需求的实现&lt;/a&gt;&lt;/li&gt;
    
    </summary>
    
      <category term="开发周刊" scheme="http://keleyundou.github.io/categories/%E5%BC%80%E5%8F%91%E5%91%A8%E5%88%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>随笔之Hexo升级之路</title>
    <link href="http://keleyundou.github.io/2016/07/29/%E9%9A%8F%E7%AC%94%E4%B9%8BHexo%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/"/>
    <id>http://keleyundou.github.io/2016/07/29/随笔之Hexo升级之路/</id>
    <published>2016-07-29T10:05:20.000Z</published>
    <updated>2016-07-29T10:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随笔-Hexo-升级"><a href="#随笔-Hexo-升级" class="headerlink" title="随笔 Hexo 升级"></a>随笔 Hexo 升级</h1><p>最近在将<code>hexo</code>升级到6.2.0的过生成中遇到了一些小问题，虽然正常功能都能使用，但在你debug的时候<br>终端上跳出那么几个扎眼的颜色总是不是那么狠舒服。对于我这种完美主义者必然要将其抹杀。</p>
<a id="more"></a>
<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><blockquote>
<p><code>nodejs</code>中文网 <a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a> 升级 <code>node</code>至<code>v6.2.0</code></p>
<p><code>npm update</code> 更新 <code>node_modules</code> 这个比较手贱 没更新相关组件而是更新了所有的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; &#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&gt; &#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p><code>npm install hexo --no-optional</code>不好使</p>
<p>更换<code>npm</code>淘宝镜像:<a href="https://npm.taobao.org" target="_blank" rel="external">https://npm.taobao.org</a></p>
<p>解决方案：<a href="https://github.com/trentm/node-bunyan/issues/216" target="_blank" rel="external">https://github.com/trentm/node-bunyan/issues/216</a></p>
<p><code>ERROR Plugin load failed: hexo-renderer-sass</code></p>
<p>移除此模块，用<code>cnpm</code>指令重新安装<br><a href="http://www.rockcoding.com/2016/03/02/hexo/" target="_blank" rel="external">http://www.rockcoding.com/2016/03/02/hexo/</a><br><a href="https://chenyiqiao.gitbooks.io/documentation_for_npm/content/install_packages.html" target="_blank" rel="external">https://chenyiqiao.gitbooks.io/documentation_for_npm/content/install_packages.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随笔-Hexo-升级&quot;&gt;&lt;a href=&quot;#随笔-Hexo-升级&quot; class=&quot;headerlink&quot; title=&quot;随笔 Hexo 升级&quot;&gt;&lt;/a&gt;随笔 Hexo 升级&lt;/h1&gt;&lt;p&gt;最近在将&lt;code&gt;hexo&lt;/code&gt;升级到6.2.0的过生成中遇到了一些小问题，虽然正常功能都能使用，但在你debug的时候&lt;br&gt;终端上跳出那么几个扎眼的颜色总是不是那么狠舒服。对于我这种完美主义者必然要将其抹杀。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://keleyundou.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="http://keleyundou.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之正则入门</title>
    <link href="http://keleyundou.github.io/2016/07/28/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E6%AD%A3%E5%88%99%E5%85%A5%E9%97%A8/"/>
    <id>http://keleyundou.github.io/2016/07/28/iOS开发之正则入门/</id>
    <published>2016-07-28T09:15:47.000Z</published>
    <updated>2016-07-29T03:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><code>&#39;^&#39;</code> 、<code>&#39;$&#39;</code> 分别表示匹配字符串的开始和结束</li>
</ul>
<p>eg: <code>&quot;^one&quot;</code></p>
<blockquote>
<p>以one开头的字符串</p>
</blockquote>
<p>eg: <code>&quot;two$&quot;</code></p>
<blockquote>
<p>以two结尾的字符串</p>
</blockquote>
<p>eg: <code>&quot;^apple$&quot;</code></p>
<blockquote>
<p>以<code>apple</code>开头和结尾的字符串</p>
</blockquote>
<p>eg: <code>&quot;banana&quot;</code></p>
<blockquote>
<p>表示包含<code>banana</code>的字符串</p>
</blockquote>
<a id="more"></a>
<ul>
<li><code>&#39;*&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;?&#39;</code> 分别表示[0, +∞), [1, +∞), [0,1]</li>
</ul>
<p>eg: <code>&quot;ab*&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>其后跟着零或多个<code>b</code></p>
</blockquote>
<p>eg: <code>&quot;ab+&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>其后跟着一或多个<code>b</code></p>
</blockquote>
<p>eg: <code>&quot;ab?&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>其后跟着零或多个<code>b</code></p>
</blockquote>
<p>eg: <code>&quot;a?b+$&quot;</code></p>
<blockquote>
<p>字符串中的结尾最多有一个<code>a</code>且其后跟着至少有一个<code>b</code></p>
</blockquote>
<ul>
<li><code>&#39;{}&#39;</code> 表示一个重复的范围</li>
</ul>
<p>eg: <code>&quot;ab{4}&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>其后跟着4个<code>b</code></p>
</blockquote>
<p>eg: <code>&quot;ab{1,}&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>其后跟着至少一个<code>b</code></p>
</blockquote>
<p>eg: <code>&quot;ab{3,4}&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>其后跟着3到4个<code>b</code></p>
</blockquote>
<hr>
<blockquote>
<p>PS:</p>
<p><code>&#39;*&#39;</code> === {0, +∞}</p>
<p><code>&#39;+&#39;</code> === {1, +∞}</p>
<p><code>&#39;?&#39;</code> === {0, 1}</p>
</blockquote>
<hr>
<ul>
<li><code>&#39;|&#39;</code> 表示或</li>
</ul>
<p>eg: <code>&quot;a|b&quot;</code></p>
<blockquote>
<p>字符串中存在<code>a</code>或<code>b</code>，两者不能同时存在</p>
</blockquote>
<p>eg: <code>&quot;(a|bcd)ef&quot;</code></p>
<blockquote>
<p>表示”aef”或”bcdef”</p>
</blockquote>
<p>eg: <code>&quot;(a|b)*c&quot;</code></p>
<blockquote>
<p>字符串中混有零或多个<code>a</code> <code>b</code>，紧跟<code>c</code></p>
</blockquote>
<ul>
<li><code>&#39;[]&#39;</code> 表示方括号内选择1-N个符合语法的字符有且仅选一个</li>
</ul>
<p>eg: <code>&quot;[ab]&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>或<code>b</code> === “a|b”</p>
</blockquote>
<p>eg: <code>&quot;[a-d]&quot;</code></p>
<blockquote>
<p>字符串中含有一个<code>a</code>到<code>d</code>的字母</p>
</blockquote>
<p>eg: <code>&quot;^[a-zA-Z]&quot;</code></p>
<blockquote>
<p>字符串已字母开头</p>
</blockquote>
<p>eg: <code>&quot;[0-9]a&quot;</code></p>
<blockquote>
<p>字母<code>a</code>的前面含有一个数字</p>
</blockquote>
<p>eg: <code>&quot;[a-zA-Z0-9]$&quot;</code></p>
<blockquote>
<p>字符串以一个字母数字结束</p>
</blockquote>
<ul>
<li><code>&#39;.&#39;</code> 表示匹配除换行（\r\n）之外的单个字符</li>
</ul>
<p>eg: <code>&quot;a.[a-z]&quot;</code></p>
<blockquote>
<p>字符串中有一个<code>a</code>后面跟着一个任意字符和一个小写字母</p>
</blockquote>
<p>eg: <code>&quot;^.{5}$&quot;</code></p>
<blockquote>
<p>任意一个长度为5的字符串</p>
</blockquote>
<ul>
<li><code>&#39;\num&#39;</code> 表示<code>&quot;\num&quot;</code>之前的字符重复的个数，其中<code>num</code>表示一个正整数，</li>
</ul>
<p>eg: <code>&quot;(.)|1&quot;</code></p>
<blockquote>
<p>2个连续的相同字符???</p>
</blockquote>
<p>eg: <code>&quot;10\{1,2}&quot;</code></p>
<blockquote>
<p>数字1后面跟着1或2个0</p>
</blockquote>
<p>eg: <code>&quot;0\{3,}&quot;</code></p>
<blockquote>
<p>数字0后面跟着3或更多的0</p>
</blockquote>
<ul>
<li><code>[^x]</code> 表示不期望出现的一个字符(x)</li>
</ul>
<p>eg: <code>&quot;@[^a-zA-Z]@&quot;</code></p>
<blockquote>
<p>两个<code>@</code>中不希望出现字母</p>
</blockquote>
<ul>
<li><code>&#39;\d&#39;</code> 匹配一个数字字符 === [0-9]</li>
<li><code>&#39;\D&#39;</code> 匹配一个非数字字符 === [^0-9]</li>
<li><code>&#39;\w&#39;</code> 匹配字母数字下划线 === [a-zA-Z0-9_]</li>
<li><code>&#39;\W&#39;</code> 匹配非字母数字下划线汉字</li>
</ul>
<hr>
<blockquote>
<p>Reference</p>
<p><a href="http://www.admin10000.com/document/5944.html" target="_blank" rel="external">http://www.admin10000.com/document/5944.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;^&amp;#39;&lt;/code&gt; 、&lt;code&gt;&amp;#39;$&amp;#39;&lt;/code&gt; 分别表示匹配字符串的开始和结束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;^one&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以one开头的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;two$&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以two结尾的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;^apple$&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以&lt;code&gt;apple&lt;/code&gt;开头和结尾的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eg: &lt;code&gt;&amp;quot;banana&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表示包含&lt;code&gt;banana&lt;/code&gt;的字符串&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="正则" scheme="http://keleyundou.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>iOS8 App Groups 数据共享</title>
    <link href="http://keleyundou.github.io/2016/04/15/iOS8-App-Groups-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
    <id>http://keleyundou.github.io/2016/04/15/iOS8-App-Groups-数据共享/</id>
    <published>2016-04-15T06:09:44.000Z</published>
    <updated>2016-04-15T06:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，APP之间很难直接通信，即便是<code>AppExtension</code> 与<code>host App</code> 之间也不能直接通信。事无绝对，APP之间的数据共享有2种方法：</p>
<ul>
<li>KeyChain</li>
<li>App Groups</li>
</ul>
<p>下面我们就讲讲如何通过<code>App Groups</code>这个功能进行APP之间通信的。<br><a id="more"></a></p>
<h2 id="Step-1-创建一个工程"><a href="#Step-1-创建一个工程" class="headerlink" title="Step 1 创建一个工程"></a>Step 1 创建一个工程</h2><p>用<code>Xcode</code>创建<code>Single View Application</code>下的一个工程，工程名是<code>CBAppGroupSimeple</code>。如图：</p>
<p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B618%E5%88%8620%E7%A7%92.png" width="400" alt="创建工程"><br></p>

<h2 id="Step-2-添加AppGroup"><a href="#Step-2-添加AppGroup" class="headerlink" title="Step 2 添加AppGroup"></a>Step 2 添加<code>AppGroup</code></h2><p>进入<code>Target</code>，选择<code>Capabilities</code> -&gt; <code>App Groups</code>（使用此功能的前提是具备开发者账号）。接下来，点击<code>+</code>添加一个唯一标识，例如：<code>group.xxx.xxx</code>，然后勾上左侧的复选框。如图：</p>
<p>图一：</p>
<p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B645%E5%88%8607%E7%A7%92.png" ,="" width="600" alt="选择开发者账号"><br></p>

<p>图二：</p>
<p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2011%E6%97%B647%E5%88%8610%E7%A7%92.png" ,="" width="400" alt="添加group"><br></p>

<h2 id="Step-3-共享数据"><a href="#Step-3-共享数据" class="headerlink" title="Step 3 共享数据"></a>Step 3 共享数据</h2><p>在实现此功能前，我们先简单布局一下<code>UI</code>。往<code>Storyboard</code>上添加一个<code>UITextField</code>和一个<code>UIButton</code>。给<code>UIButton</code>添加一个点击事件<code>saveAction:</code>。具体代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)saveAction:(<span class="keyword">id</span>)sender</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSUserDefaults</span> *userDefaults = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@"group.colabean.simeple.appgroup"</span>];</div><div class="line">    </div><div class="line">    [userDefaults setObject:<span class="keyword">self</span>.inputTextField.text forKey:<span class="string">@"kCBSharedData"</span>];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Run</code>一下工程，输入一些数据，点击<code>Save</code>按钮。</p>
<h2 id="Step-4-获取共享的数据"><a href="#Step-4-获取共享的数据" class="headerlink" title="Step 4 获取共享的数据"></a>Step 4 获取共享的数据</h2><p>我们重复<code>Step 1</code>，<code>Step 2</code>，创建另一个<code>Simple</code>，工程名是<code>CBAppGroupOtherSimple</code>，添加<code>AppGroup</code>并将上一个工程中创建的唯一标识（<code>group.colabean.simeple.appgroup</code>）勾上。</p>
<p>在我们的<code>viewDidLoad:</code>中获取共享的数据，代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    <span class="built_in">NSUserDefaults</span> *userDefaults = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@"group.colabean.simeple.appgroup"</span>];</div><div class="line">    <span class="built_in">NSString</span> *content = [userDefaults objectForKey:<span class="string">@"kCBSharedData"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"shared data: %@"</span>, content);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Run</code>一下工程，将会立即获取到从<code>CBAppGroupSimple</code>工程中共享的数据。如图：</p>
<p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-04-15%2012%E6%97%B610%E5%88%8658%E7%A7%92.png" width="500" alt="打印结果"><br></p>

<p>就是这么简单任性。</p>
<p><a href="https://github.com/keleyundou/ColaBeanSimple/tree/master/App%20Groups" target="_blank" rel="external">DownLoadSimple</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p><a href="http://www.theappguruz.com/blog/ios8-app-groups" target="_blank" rel="external">http://www.theappguruz.com/blog/ios8-app-groups</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，APP之间很难直接通信，即便是&lt;code&gt;AppExtension&lt;/code&gt; 与&lt;code&gt;host App&lt;/code&gt; 之间也不能直接通信。事无绝对，APP之间的数据共享有2种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KeyChain&lt;/li&gt;
&lt;li&gt;App Groups&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们就讲讲如何通过&lt;code&gt;App Groups&lt;/code&gt;这个功能进行APP之间通信的。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="AppGroups" scheme="http://keleyundou.github.io/tags/AppGroups/"/>
    
      <category term="Tutorial" scheme="http://keleyundou.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>译：实现Twitter UI效果</title>
    <link href="http://keleyundou.github.io/2016/03/30/%E5%AE%9E%E7%8E%B0Twitter-UI%E6%95%88%E6%9E%9C/"/>
    <id>http://keleyundou.github.io/2016/03/30/实现Twitter-UI效果/</id>
    <published>2016-03-29T17:49:11.000Z</published>
    <updated>2016-04-01T12:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用<code>Twitter</code>的APP后，我已开发者的视觉并注意到整体与部分之间相互协调是件极其有意思的事情。这引起了我的好奇心：这是怎么做到的？</p>
<p>让我们具体地讨论下这个视图布局：此效果不优雅吗？它看起开就像本应如此，但你仔细的观察后就会发现更多。随着<code>Scrollview</code>的偏移，图层的覆盖，动作和比例缩放是那么的平滑连贯… … 实在是太喜欢这个效果了。</p>
<p>So，就让我们立刻实现这个效果吧。</p>
<p>首先，先看下最终效果：</p>
<p align="center"><br><img src="http://7pn4xs.com1.z0.glb.clouddn.com/colabeanTwitterProfile.gif" width="375" height="667"><br></p>

<a id="more"></a>
<h3 id="结构描述"><a href="#结构描述" class="headerlink" title="结构描述"></a>结构描述</h3><hr>
<p>在写代码之前，我想给你一个关于如何构建UI的简单意见。</p>
<p>打开<code>Main.storyboard</code>文件，在这个控制器里面你会发现2个主要的对象。第一个是一个呈现<code>Header</code>的视图，第二个是<code>Scrollview</code>，它包含了<code>Avatar</code>和账号相关的其他信息，如：<code>username</code>标签和<code>Follow</code>按钮。还有一个被叫做<code>Sizer</code>的视图，它是为了确保<code>Scrollview</code>拥有足够大的垂直滑动的空间。</p>
<p>就像你看到的那样，这个结构非常的简单。稍微注意一下就可发现<code>Header</code>的外部放置了一个<code>Scrollview</code>，而不是与其他元素放置在一起。虽然没必严格如此，但这样会使它的结构变动更加灵活。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><hr>
<p>如果你仔细的看了最后的动画，将会注意到你要管理2个不同的动作：</p>
<ol>
<li>向下拉（当<code>Scrollview</code>已经停靠在屏幕的顶部的时候）</li>
<li>上下滑动</li>
</ol>
<p>第二个动作可以细分为4个小步骤：</p>
<ul>
<li>向上滑动，一直到导航条默认的大小并停靠在屏幕的顶部。</li>
<li>向上滑动，<code>Avatar</code>开始逐渐变小。</li>
<li>当<code>Header</code>被固定后，<code>Avatar</code>会移动到它的下边。</li>
<li>当<code>username</code>标签抵达<code>Header</code>的顶部时，一个新的白色<code>Label</code>将会从<code>Header</code>中心的底部展现。这时<code>Header</code>的背景图片将会用高斯模糊渲染。</li>
</ul>
<p>打开<code>ViewController</code>让我们一个一个的实现这些步骤。</p>
<h3 id="构建管理者"><a href="#构建管理者" class="headerlink" title="构建管理者"></a>构建管理者</h3><hr>
<p>首先要做的事情很明显，就是获取关于<code>Scrollview</code>的偏移量<code>offset</code>。我们可以通过<code>UIScrollViewDelegate</code>协议实现<code>scrollViewDidScroll</code>方法。</p>
<p>在一个<code>View</code>上执行最简单地动画方式是使用<code>Core Animation</code>逐渐的进行三维变换，并给<code>layer.transform</code>赋予新值。</p>
<p>关于<code>Core Animation</code>可以参考这篇文章</p>
<p><a href="http://www.thinkandbuild.it/playing-around-with-core-graphics-core-animation-and-touch-events-part-1/" target="_blank" rel="external">http://www.thinkandbuild.it/playing-around-with-core-graphics-core-animation-and-touch-events-part-1/</a></p>
<p>这些是<code>scrollViewDidScroll:</code>方法的第一部分</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> offset = scrollView.contentOffset.y;</div><div class="line"><span class="built_in">CATransform3D</span> avatarTransform = <span class="built_in">CATransform3DIdentity</span>;</div><div class="line"><span class="built_in">CATransform3D</span> headerTransform = <span class="built_in">CATransform3DIdentity</span>;</div></pre></td></tr></table></figure>
<p>在这里我们获取一个当前垂直偏移量<code>offset</code>，并初始化2个<code>CATransform3D</code>变量。</p>
<h3 id="下拉"><a href="#下拉" class="headerlink" title="下拉"></a>下拉</h3><hr>
<p>下拉动作的管理：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> headerScaleFactor = -(offset) / header.bounds.size.height;</div><div class="line">        <span class="built_in">CGFloat</span> headerSizevariation = (header.bounds.size.height * (<span class="number">1.0</span> + headerScaleFactor) - header.bounds.size.height) / <span class="number">2.0</span>;</div><div class="line">        headerTransform = <span class="built_in">CATransform3DTranslate</span>(headerTransform, <span class="number">0</span>, headerSizevariation, <span class="number">0</span>);</div><div class="line">        headerTransform = <span class="built_in">CATransform3DScale</span>(headerTransform, <span class="number">1.0</span> + headerScaleFactor, <span class="number">1.0</span> + headerScaleFactor, <span class="number">0</span>);</div><div class="line">        header.layer.transform = headerTransform;</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>首先，我们检查<code>offset</code>是否为负数：用户在下拉的过程中，将会进入<code>Scrollview</code>的弹性区域。</p>
<p>剩下的代码就是简单的数学逻辑。</p>
<p><code>Header</code>的扩大是因为它的上边缘固定于屏幕的顶部，而底部的图片在等比缩放。</p>
<p><code>the transformation is made by scaling and subsequently translating to the top for a value equal to the size variation of the view.</code>实际上，移动<code>ImageView</code>图层的中点到顶部并同时缩放它，你可以获得相同的效果。</p>
<p align="center"> <img src="http://www.thinkandbuild.it/wp-content/uploads/2015/01/ImageScale.png"></p>

<p><code>headerScaleFactor</code>是用来被计算的一部分。我们想用<code>offset</code>适当的对<code>Header</code>进行缩放。换句话说，当<code>offset</code>是<code>Header</code>高度的2倍时，<code>headerScaleFactor</code>必须是2.0。</p>
<p>我们需要管理的第二个动作是上下滑动。让我们看看，如何一步步通过UI的主要元素完成变换的。</p>
<h3 id="头部（第一阶段）"><a href="#头部（第一阶段）" class="headerlink" title="头部（第一阶段）"></a>头部（第一阶段）</h3><hr>
<p>当前的<code>offset</code>应该大于0。<code>Header</code>应该随<code>offset</code>进行垂直变换，直到它期望的高度（我们后面将会讲解<code>Header</code>的高斯模糊）。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">headerTransform = <span class="built_in">CATransform3DTranslate</span>(headerTransform, <span class="number">0</span>, MAX(-offset_HeaderStop, -offset), <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>这句代码非常简单。我们只需定义一个让<code>Header</code>在此停止移动的最小值。</p>
<p>让我感到羞愧的是我比较懒！所以我写死了一些数值，像<code>offset_HeaderStop</code>。其实，我们可以通过计算UI元素的位置来获取相同的效果。下次有空再改吧。</p>
<h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><hr>
<p><code>Avatar</code>的缩放与我们处理下拉的逻辑一样，只是在这种情况下，图片是到达底部而不是顶部。这段代码和上边的比较相似，除了减小缩放的比例为1.4。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Avatar -----------</span></div><div class="line"><span class="built_in">CGFloat</span> avatarScaleFactor = MIN(offset_HeaderStop, offset) / avatarImage.bounds.size.height / <span class="number">1.4</span>;</div><div class="line"><span class="built_in">CGFloat</span> avatarSizevariation = (avatarImage.bounds.size.height * (<span class="number">1.0</span> + avatarScaleFactor) - avatarImage.bounds.size.height) / <span class="number">2.0</span>;</div><div class="line">avatarTransform = <span class="built_in">CATransform3DTranslate</span>(avatarTransform, <span class="number">0</span>, avatarSizevariation, <span class="number">0</span>);</div><div class="line">avatarTransform = <span class="built_in">CATransform3DScale</span>(avatarTransform, <span class="number">1.0</span>-avatarScaleFactor, <span class="number">1.0</span>-avatarScaleFactor, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>就像你看到的，当<code>Header</code>停止变化时，我们用<code>MIN</code>函数来使<code>Avatar</code>的缩放停止。</p>
<p>此时，我们根据当前<code>offset</code>设置最顶层的图层。除非<code>offset</code>小于等于<code>offset_HeaderStop</code>，最顶层的图层是<code>Avatar</code>，否则是<code>Header</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (offset &lt;= offset_HeaderStop) &#123;</div><div class="line">            <span class="keyword">if</span> (avatarImage.layer.zPosition &lt; header.layer.zPosition) &#123;</div><div class="line">                header.layer.zPosition = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (avatarImage.layer.zPosition &gt;= header.layer.zPosition) &#123;</div><div class="line">                header.layer.zPosition = <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="白色Label"><a href="#白色Label" class="headerlink" title="白色Label"></a>白色Label</h3><hr>
<p>这段代码是白色<code>Label</code>的动画：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ------------ Label</span></div><div class="line"><span class="built_in">CATransform3D</span> labelTransform = <span class="built_in">CATransform3DMakeTranslation</span>(<span class="number">0</span>, MAX(-distance_W_LabelHeader, offset_B_LabelHeader - offset), <span class="number">0</span>);</div><div class="line">headerLabel.layer.transform = labelTransform;</div></pre></td></tr></table></figure>
<p>这里有2个令我感到羞愧的变量值：当<code>offset</code>等于<code>offset_B_LabelHeader</code>时，黑色的<code>username</code>标签刚到触碰到<code>Header</code>的底部。</p>
<p align="center"><br><img src="http://www.thinkandbuild.it/wp-content/uploads/2015/01/shame1.png"><br></p>

<p><code>distance_W_LabelHeader</code>是<code>Header</code>底部与白色<code>Label</code>终点之间的距离。</p>
<p align="center"><br><img src="http://www.thinkandbuild.it/wp-content/uploads/2015/01/shame2.png"><br></p>

<p>这个变换是通过此逻辑计算：黑色<code>Label</code>触碰到<code>Header</code>，白色<code>Label</code>就会立即出现，并且到达<code>Header</code>中点位置就停止移动。所以我们使用下面代码创建<code>Y</code>值：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MAX(-distance_W_LabelHeader, offset_B_LabelHeader - offset)</div></pre></td></tr></table></figure>
<h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h3><hr>
<p>最后一个效果是<code>Header</code>的模糊。为了得到合适的解决方案，我用了3个不同的库… … 我也尝试过用<code>OpenGL ES</code>创建基类，但实时更新模糊总是非常缓慢。</p>
<p>然后我意识到我可以对模糊仅仅计算一次，将不模糊和模糊的图片进行重叠，只是改变<code>alpha</code>值。我非常确信，<code>Twitter</code>就是这样做的。</p>
<p>在<code>viewDidAppear</code>中，我们计算<code>Header</code>的模糊值并隐藏它，设置<code>alpha</code>值为0。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Header - Blurred Image</span></div><div class="line">headerBlurImageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:header.bounds];</div><div class="line">headerBlurImageView.image = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"header_bg"</span>] blurredImageWithRadius:<span class="number">10</span> iterations:<span class="number">20</span> tintColor:[<span class="built_in">UIColor</span> clearColor]];</div><div class="line">headerBlurImageView.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</div><div class="line">headerBlurImageView.alpha = <span class="number">0.0</span>;</div><div class="line">[header insertSubview:headerBlurImageView belowSubview:headerLabel];</div><div class="line">header.clipsToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>模糊视图是用过<a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="external"><code>FXBlurView</code></a>实现的。</p>
<p>在<code>scrollViewDidScroll:</code>方法中，我们只需根据<code>offset</code>设置<code>alpha</code>:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ------------ Blur</span></div><div class="line">headerBlurImageView.alpha = MIN(<span class="number">1.0</span>, (offset - offset_B_LabelHeader) / distance_W_LabelHeader);</div></pre></td></tr></table></figure>
<p>这个计算的背后逻辑是：<code>alpha</code>最大值是1，当黑色<code>Label</code>触碰到<code>Header</code>时模糊效果开始出现，当白色到达最终位置时，也将停止继续模糊。</p>
<p>就这样！</p>
<p>我希望你喜欢这个教程。学习如何重现这种很棒的动画效果对我来说是很大的乐趣。</p>
<blockquote>
<p>Swift代码：<a href="https://github.com/ariok/TB_TwitterUI" target="_blank" rel="external"><strong>Download Source</strong></a><br>OC代码: <a href="https://github.com/ariok/TB_TwitterUI" target="_blank" rel="external"><strong>Download Source</strong></a></p>
</blockquote>
<hr>
<blockquote>
<p>原版：<a href="http://www.thinkandbuild.it/implementing-the-twitter-ios-app-ui/" target="_blank" rel="external">IMPLEMENTING THE TWITTER IOS APP UI</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用&lt;code&gt;Twitter&lt;/code&gt;的APP后，我已开发者的视觉并注意到整体与部分之间相互协调是件极其有意思的事情。这引起了我的好奇心：这是怎么做到的？&lt;/p&gt;
&lt;p&gt;让我们具体地讨论下这个视图布局：此效果不优雅吗？它看起开就像本应如此，但你仔细的观察后就会发现更多。随着&lt;code&gt;Scrollview&lt;/code&gt;的偏移，图层的覆盖，动作和比例缩放是那么的平滑连贯… … 实在是太喜欢这个效果了。&lt;/p&gt;
&lt;p&gt;So，就让我们立刻实现这个效果吧。&lt;/p&gt;
&lt;p&gt;首先，先看下最终效果：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7pn4xs.com1.z0.glb.clouddn.com/colabeanTwitterProfile.gif&quot; width=&quot;375&quot; height=&quot;667&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="Tutorial" scheme="http://keleyundou.github.io/tags/Tutorial/"/>
    
      <category term="iOS" scheme="http://keleyundou.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ColaBean&#39;s new Blog</title>
    <link href="http://keleyundou.github.io/2016/03/25/colabean&#39;s-new-blog/"/>
    <id>http://keleyundou.github.io/2016/03/25/colabean&#39;s-new-blog/</id>
    <published>2016-03-25T15:50:39.000Z</published>
    <updated>2016-03-26T04:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是<code>ColaBen</code>新部署的blog，之前用的是<code>Octopress</code>，由于发布文章的指令过于繁琐，时间长了容易遗忘，不是很好用。在大神的推荐下，开始使用<code>Hexo</code>写博客。刚开始也没觉得怎么样，但经过亲身实践后，果然是比<code>Octopress</code>用起来顺手多了。blog这东西用起来顺手就好，适合自己的才是最好的。哈哈。。。</p>
<p>恩…抽空在研究下<code>Hexo</code>，把blog从新部署下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是&lt;code&gt;ColaBen&lt;/code&gt;新部署的blog，之前用的是&lt;code&gt;Octopress&lt;/code&gt;，由于发布文章的指令过于繁琐，时间长了容易遗忘，不是很好用。在大神的推荐下，开始使用&lt;code&gt;Hexo&lt;/code&gt;写博客。刚开始也没觉得怎么样，但经过亲身
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://keleyundou.github.io/2016/03/25/hello-world/"/>
    <id>http://keleyundou.github.io/2016/03/25/hello-world/</id>
    <published>2016-03-25T14:56:07.000Z</published>
    <updated>2016-03-25T14:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>即时通讯之输入流中读取基本数据</title>
    <link href="http://keleyundou.github.io/2016/03/16/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8B%E8%BE%93%E5%85%A5%E6%B5%81%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE/"/>
    <id>http://keleyundou.github.io/2016/03/16/即时通讯之输入流中读取基本数据/</id>
    <published>2016-03-16T13:59:33.000Z</published>
    <updated>2016-04-01T14:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>相应的和写入一样，下面将读取的接口陈列如下：</p>
<ul>
<li>读取 1 byte</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (int8_t)readChar;</div><div class="line">&#123;</div><div class="line">    int8_t v;</div><div class="line">    [data getBytes:&amp;v range:<span class="built_in">NSMakeRange</span>(len, <span class="number">1</span>)];</div><div class="line">    len++;</div><div class="line">    <span class="keyword">return</span> (v &amp; <span class="number">0x0FF</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>读取 2 byte</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (int16_t)readShort;</div><div class="line">&#123;</div><div class="line">    int32_t ch1 = [<span class="keyword">self</span> read];</div><div class="line">    int32_t ch2 = [<span class="keyword">self</span> read];</div><div class="line">    <span class="keyword">if</span> ((ch1 | ch2) &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"Exception"</span> reason:<span class="string">@"EOFException"</span> userInfo:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (int16_t)((ch1 &lt;&lt; <span class="number">8</span>) + (ch2 &lt;&lt; <span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>读取 4 byte</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (int32_t)readInt;</div><div class="line">&#123;</div><div class="line">    int32_t ch1 = [<span class="keyword">self</span> read];</div><div class="line">    int32_t ch2 = [<span class="keyword">self</span> read];</div><div class="line">    int32_t ch3 = [<span class="keyword">self</span> read];</div><div class="line">    int32_t ch4 = [<span class="keyword">self</span> read];</div><div class="line">    <span class="keyword">if</span> ((ch1 | ch2 | ch3 | ch4) &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"Exception"</span> reason:<span class="string">@"EOFException"</span> userInfo:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ((ch1 &lt;&lt; <span class="number">24</span>) + (ch2 &lt;&lt; <span class="number">16</span>) + (ch3 &lt;&lt; <span class="number">8</span>) + (ch4 &lt;&lt; <span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>读取 8 byte</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (int64_t)readLong;</div><div class="line">&#123;</div><div class="line">    int8_t ch[<span class="number">8</span>];</div><div class="line">    [data getBytes:&amp;ch range:<span class="built_in">NSMakeRange</span>(len,<span class="number">8</span>)];</div><div class="line">    len += <span class="number">8</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (((int64_t)ch[<span class="number">0</span>] &lt;&lt; <span class="number">56</span>) +</div><div class="line">            ((int64_t)(ch[<span class="number">1</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">48</span>) +</div><div class="line">            ((int64_t)(ch[<span class="number">2</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">40</span>) +</div><div class="line">            ((int64_t)(ch[<span class="number">3</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">32</span>) +</div><div class="line">            ((int64_t)(ch[<span class="number">4</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">24</span>) +</div><div class="line">            ((ch[<span class="number">5</span>] &amp; <span class="number">255</span>) &lt;&lt; <span class="number">16</span>) +</div><div class="line">            ((ch[<span class="number">6</span>] &amp; <span class="number">255</span>) &lt;&lt;  <span class="number">8</span>) +</div><div class="line">            ((ch[<span class="number">7</span>] &amp; <span class="number">255</span>) &lt;&lt;  <span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BCD时钟转换</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">- (BDSTime)readBCDTime</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> BDSTime bcdTime;</div><div class="line">    Byte year[<span class="number">2</span>];</div><div class="line">    Byte month[<span class="number">1</span>], day[<span class="number">1</span>], hour[<span class="number">1</span>], min[<span class="number">1</span>], sec[<span class="number">1</span>];</div><div class="line"></div><div class="line">    [data getBytes:&amp;year range:<span class="built_in">NSMakeRange</span>(len, <span class="keyword">sizeof</span>(year))];</div><div class="line">    len += <span class="keyword">sizeof</span>(year);</div><div class="line"></div><div class="line">    [data getBytes:&amp;month range:<span class="built_in">NSMakeRange</span>(len, <span class="keyword">sizeof</span>(month))];</div><div class="line">    len += <span class="keyword">sizeof</span>(month);</div><div class="line"></div><div class="line">    [data getBytes:&amp;day range:<span class="built_in">NSMakeRange</span>(len, <span class="keyword">sizeof</span>(day))];</div><div class="line">    len += <span class="keyword">sizeof</span>(day);</div><div class="line"></div><div class="line">    [data getBytes:&amp;hour range:<span class="built_in">NSMakeRange</span>(len, <span class="keyword">sizeof</span>(hour))];</div><div class="line">    len += <span class="keyword">sizeof</span>(hour);</div><div class="line"></div><div class="line">    [data getBytes:&amp;min range:<span class="built_in">NSMakeRange</span>(len, <span class="keyword">sizeof</span>(min))];</div><div class="line">    len += <span class="keyword">sizeof</span>(min);</div><div class="line"></div><div class="line">    [data getBytes:&amp;sec range:<span class="built_in">NSMakeRange</span>(len, <span class="keyword">sizeof</span>(sec))];</div><div class="line">    len += <span class="keyword">sizeof</span>(sec);</div><div class="line"></div><div class="line">    bcdTime.year = [<span class="keyword">self</span> readBCDToYear:year];</div><div class="line"></div><div class="line">    bcdTime.month = bcdToInt(month, <span class="keyword">sizeof</span>(month));</div><div class="line">    bcdTime.day = bcdToInt(day, <span class="keyword">sizeof</span>(day));</div><div class="line">    bcdTime.hour = bcdToInt(hour, <span class="keyword">sizeof</span>(hour));</div><div class="line">    bcdTime.min = bcdToInt(min, <span class="keyword">sizeof</span>(min));</div><div class="line">    bcdTime.sec = bcdToInt(sec, <span class="keyword">sizeof</span>(sec));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> bcdTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">///bcd转int</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  bcdToInt(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *bcd, <span class="keyword">int</span> length)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> dec = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</div><div class="line">    &#123;</div><div class="line">        tmp = ((bcd[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) * <span class="number">10</span> + (bcd[i] &amp; <span class="number">0x0F</span>);</div><div class="line">        dec += tmp * pow(<span class="number">100</span>, length - <span class="number">1</span> - i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> dec;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (int16_t)readBCDToYear:(Byte *)dt</div><div class="line">&#123;</div><div class="line">    Byte *year = dt;</div><div class="line">    Byte y_high = year[<span class="number">0</span>];</div><div class="line">    Byte y_low = year[<span class="number">1</span>];</div><div class="line"></div><div class="line">    int16_t high = bcdToInt(&amp;y_high, <span class="keyword">sizeof</span>(y_high));</div><div class="line">    int16_t low = bcdToInt(&amp;y_low, <span class="keyword">sizeof</span>(y_low));</div><div class="line">    <span class="keyword">return</span> high*<span class="number">100</span>+low;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相应的和写入一样，下面将读取的接口陈列如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取 1 byte&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (int8_t)readChar;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int8_t v;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [data getBytes:&amp;amp;v range:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(len, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    len++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (v &amp;amp; &lt;span class=&quot;number&quot;&gt;0x0FF&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="解码" scheme="http://keleyundou.github.io/tags/%E8%A7%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>即时通讯之基本数据写入到输出流中</title>
    <link href="http://keleyundou.github.io/2016/03/16/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E5%88%B0%E8%BE%93%E5%87%BA%E6%B5%81%E4%B8%AD/"/>
    <id>http://keleyundou.github.io/2016/03/16/即时通讯之基本数据写入到输出流中/</id>
    <published>2016-03-16T13:53:52.000Z</published>
    <updated>2016-04-01T13:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做IM或蓝牙传输的项目中，难免会有这样那样的数据转码的情况，下面就将我在项目中用到的一些转换接口总结一下，将其陈列出来，希望能够帮助后来者。</p>
<ul>
<li>将 1 byte 数值写入输出流中， 先写入高位</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)writeChar:(int8_t)v;</div><div class="line">&#123;</div><div class="line">    int8_t ch[<span class="number">1</span>];</div><div class="line">    ch[<span class="number">0</span>] = (v &amp; <span class="number">0x0FF</span>);</div><div class="line">    [data appendBytes:ch length:<span class="keyword">sizeof</span>(ch)];</div><div class="line">    len++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>将 2 byte 数值写入输出流中， 先写入高位</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)writeShort:(int16_t)v;</div><div class="line">&#123;</div><div class="line">    int8_t ch[<span class="number">2</span>];</div><div class="line">    ch[<span class="number">0</span>] = (v &amp; <span class="number">0x0FF00</span>) &gt;&gt; <span class="number">8</span>;</div><div class="line">    ch[<span class="number">1</span>] = (v &amp; <span class="number">0x0FF</span>);</div><div class="line">    [data appendBytes:ch length:<span class="keyword">sizeof</span>(ch)];</div><div class="line">    len += <span class="keyword">sizeof</span>(ch);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将 4 byte 数值写入输出流中， 先写入高位</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)writeInt:(int32_t)v;</div><div class="line">&#123;</div><div class="line">    int8_t ch[<span class="number">4</span>];</div><div class="line">    <span class="keyword">for</span> (int32_t i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(ch); i++) &#123;</div><div class="line">        ch[i] = ((v &gt;&gt; ((<span class="number">3</span>-i) * <span class="number">8</span>)) &amp; <span class="number">0x0FF</span>);</div><div class="line">    &#125;</div><div class="line">    [data appendBytes:ch length:<span class="keyword">sizeof</span>(ch)];</div><div class="line">    len += <span class="keyword">sizeof</span>(ch);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将 8 byte 数值写入输出流中， 先写入高位</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)writeLong:(int64_t)v;</div><div class="line">&#123;</div><div class="line">    int8_t ch[<span class="number">8</span>];</div><div class="line">    <span class="keyword">for</span> (int32_t i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(ch); i++) &#123;</div><div class="line">        ch[i] = ((v &gt;&gt; ((<span class="number">7</span>-i) * <span class="number">8</span>)) &amp; <span class="number">0x0FF</span>);</div><div class="line">    &#125;</div><div class="line">    [data appendBytes:ch length:<span class="keyword">sizeof</span>(ch)];</div><div class="line">    len += <span class="keyword">sizeof</span>(ch);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将 BCD时钟 写入输出流中</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">- (Byte)int_toBCD:(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v</div><div class="line">&#123;</div><div class="line">    Byte d1 = v / <span class="number">10</span>;</div><div class="line">    Byte d2 = v % <span class="number">10</span>;</div><div class="line">    Byte d = (d1 &lt;&lt; <span class="number">4</span>) | d2;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)writeBCDTime:(BDSTime *)time;</div><div class="line">&#123;</div><div class="line">    <span class="comment">//write year</span></div><div class="line">    [<span class="keyword">self</span> writeYearBCDTime:time -&gt; year];</div><div class="line">    <span class="comment">//write month</span></div><div class="line">    [<span class="keyword">self</span> writeOtherBCDTime:time -&gt; month];</div><div class="line">    <span class="comment">//write day</span></div><div class="line">    [<span class="keyword">self</span> writeOtherBCDTime:time -&gt; day];</div><div class="line">    <span class="comment">//write hour</span></div><div class="line">    [<span class="keyword">self</span> writeOtherBCDTime:time -&gt; hour];</div><div class="line">    <span class="comment">//write min</span></div><div class="line">    [<span class="keyword">self</span> writeOtherBCDTime:time -&gt; min];</div><div class="line">    <span class="comment">//write sec</span></div><div class="line">    [<span class="keyword">self</span> writeOtherBCDTime:time -&gt; sec];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)writeYearBCDTime:(int16_t)v</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> high, low;</div><div class="line">    high = v / <span class="number">100</span>;</div><div class="line">    low = v % <span class="number">100</span>;</div><div class="line"></div><div class="line">    int8_t ch[<span class="number">2</span>];</div><div class="line">    ch[<span class="number">0</span>] = int_toBCD(high);</div><div class="line">    ch[<span class="number">1</span>] = int_toBCD(low);</div><div class="line">    [data appendBytes:ch length:<span class="keyword">sizeof</span>(ch)];</div><div class="line">    len += <span class="keyword">sizeof</span>(ch);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)writeOtherBCDTime:(int8_t)v</div><div class="line">&#123;</div><div class="line">    int8_t ch[<span class="number">1</span>];</div><div class="line">    ch[<span class="number">0</span>] = int_toBCD(v);</div><div class="line">    [data appendBytes:ch length:<span class="keyword">sizeof</span>(ch)];</div><div class="line">    len += <span class="keyword">sizeof</span>(ch);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>下载地址：<a href="https://github.com/keleyundou/BDWRDataDemo" target="_blank" rel="external">BDWRDataDemo</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做IM或蓝牙传输的项目中，难免会有这样那样的数据转码的情况，下面就将我在项目中用到的一些转换接口总结一下，将其陈列出来，希望能够帮助后来者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 1 byte 数值写入输出流中， 先写入高位&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)writeChar:(int8_t)v;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int8_t ch[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ch[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = (v &amp;amp; &lt;span class=&quot;number&quot;&gt;0x0FF&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [data appendBytes:ch length:&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ch)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    len++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="编码" scheme="http://keleyundou.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>关于字体适配的那些事</title>
    <link href="http://keleyundou.github.io/2016/01/18/%E5%85%B3%E4%BA%8E%E5%AD%97%E4%BD%93%E9%80%82%E9%85%8D%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://keleyundou.github.io/2016/01/18/关于字体适配的那些事/</id>
    <published>2016-01-18T13:39:42.000Z</published>
    <updated>2016-04-01T13:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前做过很多项目都没考虑过字体适配问题。相信绝大多数人在做项目时，都没仔细去考虑这件事。一般都是根据UI出的图做个估算，有耐心的估计会自己拿工具测量下。如今，考虑到iPhone机型的多样性，UI设计师不可能针对每一款iPhone的屏幕出一套UI图。一般而言，都是基于5s的标准出UI。当我们在设置字体时，往往都是基于UI并且针对不同的屏幕字体也都是绝对的。那么问题来了，细心的同学可能会注意到，相同大小的字体在5s或6上也许差别不大，但在6p上字体有缩小的现象，其原因由分辨率导致。</p>
<a id="more"></a>
<p>在6出来不久，曾看过有关适配的文章，其中关于iPhone尺寸规格如下：</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>宽</th>
<th>高</th>
<th>对角线</th>
<th>逻辑分辨率</th>
<th>scale Factor</th>
<th>设备分辨率</th>
<th>PPI</th>
</tr>
</thead>
<tbody>
<tr>
<td>  3GS</td>
<td>2.4inch</td>
<td>4.5inch</td>
<td>3.5inch</td>
<td>320x480</td>
<td>@1x</td>
<td>320x480</td>
<td>163</td>
</tr>
<tr>
<td>  4(s)</td>
<td>2.31inch</td>
<td>4.5inch</td>
<td>3.5inch</td>
<td>320x480</td>
<td>@2x</td>
<td>640x960</td>
<td>326</td>
</tr>
<tr>
<td>  5c</td>
<td>2.33inch</td>
<td>4.90inch</td>
<td>4inch</td>
<td>320x568</td>
<td>@2x</td>
<td>640x1136</td>
<td>326</td>
</tr>
<tr>
<td>  5(s)</td>
<td>2.31inch</td>
<td>4.87inch</td>
<td>4inch</td>
<td>320x568</td>
<td>@2x</td>
<td>640x1136</td>
<td>326</td>
</tr>
<tr>
<td>  6</td>
<td>2.64inch</td>
<td>5.44inch</td>
<td>4.7inch</td>
<td>375x667</td>
<td>@2x</td>
<td>750x1334</td>
<td>326</td>
</tr>
<tr>
<td>  6p</td>
<td>3.06inch</td>
<td>6.22inch</td>
<td>5.5inch</td>
<td>414x736</td>
<td>@3x</td>
<td>1242x2208</td>
<td>401</td>
</tr>
</tbody>
</table>
<p>  从iPhone3GS/iPhone4(s)过渡到iPhone5(s)时，在逻辑上宽度不变高度稍高，之前旧的素材和布局通过AutoresizingFlexible简单适配即可运行得很好，但由于高宽比增大，上下两端出现黑粗边（典型如LaunchImage）。从分辨率的角度来看，除了需要提供LaunchImage这种满屏图，其他基本沿用二倍图（@2x）；从屏幕尺寸角度来看，需要对纵向排版略加调整。<br>  从iPhone5(s)发展到iPhone6(+)，由于高宽比保持不变，iOS对图标、图片、字体进行等比放大自适应，清晰度会有所降低。同时，绝对坐标布局会导致在大屏下出现偏左偏上的问题。从分辨率的角度来看，iPhone6沿用二倍图（@2x），但需为iPhone6+提供更高的三倍图（@3x）；从屏幕尺寸角度来看，需要重新对UI元素尺寸和布局进行适配，以期视觉协调。</p>
<h3 id="字体适配"><a href="#字体适配" class="headerlink" title="字体适配"></a>字体适配</h3><p>以上属于科普类的东西，下面来点实际的。</p>
<p>关于字体适配有2种方案。</p>
<h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p>设置一个大小区域范围，比如10~30<code>pointSize</code>的范围(pointSize为<code>UIFont</code>的一个CGFloat类型的属性)，然后<code>for</code>循环降序遍历此范围设置一个临时的<code>UIFont</code>变量，根据此变量计算当前文本的大小，与当前<code>UILabel</code>的<code>height</code>作比较找出合适的字体。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define ADAPTIVE__FONT_SIZE_MINIMUM_VALUE 20</span></div><div class="line"><span class="meta">#define ADAPTIVE_FONT_SIZE_MAXIMUM_VALUE 30</span></div><div class="line"></div><div class="line">-(<span class="built_in">UIFont</span> *) adjustFontSizeToFillItsContents</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span>* text = <span class="keyword">self</span>.text;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ADAPTIVE_FONT_SIZE_MAXIMUM_VALUE; i&gt;ADAPTIVE__FONT_SIZE_MINIMUM_VALUE; i--) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">UIFont</span> *font = [<span class="built_in">UIFont</span> fontWithName:<span class="keyword">self</span>.font.fontName size:(<span class="built_in">CGFloat</span>)i];</div><div class="line">        <span class="built_in">NSAttributedString</span> *attributedText = [[<span class="built_in">NSAttributedString</span> alloc] initWithString:text attributes:@&#123;<span class="built_in">NSFontAttributeName</span>: font&#125;];</div><div class="line"></div><div class="line">        <span class="built_in">CGRect</span> rectSize = [attributedText boundingRectWithSize:<span class="built_in">CGSizeMake</span>(<span class="keyword">self</span>.frame.size.width, <span class="built_in">CGFLOAT_MAX</span>) options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span> context:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (rectSize.size.height &lt;= <span class="keyword">self</span>.frame.size.height) &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="built_in">UIFont</span> fontWithName:<span class="keyword">self</span>.font.fontName size:(<span class="built_in">CGFloat</span>)i];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.font;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>计算出一个<code>scale</code>重新设置<code>UIFont</code>，伪代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> scale = ([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width / <span class="number">320</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"before : %.1f"</span>, [font pointSize]);</div><div class="line">font = [<span class="built_in">UIFont</span> fontWithName:[font fontName] size:fontSize * scale];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"after : %.1f"</span>, [font pointSize]);</div></pre></td></tr></table></figure>
<p>既然需要重新设置<code>UIFont</code>，那么我们不可避免的要<code>hook</code>下<code>UIFont</code>的类方法<code>fontWithName:size:</code>做个函数交换的处理。<br>函数的交换我们需要用到<code>runtime</code>机制。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> bd_exchageClassMethod(Class aClass, SEL oldSEL, SEL newSEL)</div><div class="line">&#123;</div><div class="line">    Method oldClsMethod = class_getClassMethod(aClass, oldSEL);</div><div class="line">    assert(oldClsMethod);</div><div class="line">    Method newClsMethod = class_getClassMethod(aClass, newSEL);</div><div class="line">    assert(newClsMethod);</div><div class="line">    method_exchangeImplementations(oldClsMethod, newClsMethod);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，我们给<code>UIFont</code>创建一个<code>Categroy</code>文件，文件名为<code>AdaptiveFont</code>。在实现文件代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIFont</span> (<span class="title">AdaptiveFont</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)hook</div><div class="line">&#123;</div><div class="line">    bd_exchageClassMethod([<span class="built_in">UIFont</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(fontWithName:size:), <span class="keyword">@selector</span>(hook_fontWithName:size:));</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIFont</span> *)hook_fontWithName:(<span class="built_in">NSString</span> *)fontName size:(<span class="built_in">CGFloat</span>)fontSize</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"before : %.1f"</span>, fontSize);</div><div class="line">    <span class="built_in">CGFloat</span> scale = ([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width / <span class="number">320</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"scale : %f"</span>, scale);</div><div class="line">    <span class="built_in">UIFont</span> *font = [<span class="keyword">self</span> hook_fontWithName:fontName size:fontSize * scale];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"after : %.1f"</span>, [font pointSize]);</div><div class="line">    printf(<span class="string">"&lt;---------------------&gt;\n"</span>);</div><div class="line">    <span class="keyword">return</span> font;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>接口文件暴漏相关方法如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIFont</span> (<span class="title">AdaptiveFont</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)hook;</div><div class="line">+ (<span class="built_in">UIFont</span> *)hook_fontWithName:(<span class="built_in">NSString</span> *)fontName size:(<span class="built_in">CGFloat</span>)fontSize;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>相对比较而言，我还是倾向于方法二。方法一的前提条件是<code>height</code>要适配好，不能是绝对值，否效果。当然，方法二也一样，只不过<code>height</code>若是绝对值，会出现文字显示不全的问题。<br>在用法上，方法一只需调用<code>adjustFontSizeToFillItsContents</code>，而方法二需在<code>application:didFinishLaunchingWithOptions:</code>函数调用下<code>hook</code>。</p>
<p>当然，这并不是最终也不是最好的适配方案。个人觉得根据<code>PPI</code>适配字体，限于经历有限只能研究到这。<br>欢迎纠错，有什么好的字体适配方案也可以在下方评论进行探讨。</p>
<hr>
<blockquote>
<p>Demo地址：<a href="https://github.com/keleyundou/AdaptiveFontDemo" title="AdaptiveFontDemo" target="_blank" rel="external">AdaptiveFontDemo</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前做过很多项目都没考虑过字体适配问题。相信绝大多数人在做项目时，都没仔细去考虑这件事。一般都是根据UI出的图做个估算，有耐心的估计会自己拿工具测量下。如今，考虑到iPhone机型的多样性，UI设计师不可能针对每一款iPhone的屏幕出一套UI图。一般而言，都是基于5s的标准出UI。当我们在设置字体时，往往都是基于UI并且针对不同的屏幕字体也都是绝对的。那么问题来了，细心的同学可能会注意到，相同大小的字体在5s或6上也许差别不大，但在6p上字体有缩小的现象，其原因由分辨率导致。&lt;/p&gt;
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="UIFont" scheme="http://keleyundou.github.io/tags/UIFont/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之Quartz2D生成PDF-Part2</title>
    <link href="http://keleyundou.github.io/2015/08/18/iOS%E5%BC%80%E5%8F%91%E4%B9%8BQuartz2D%E7%94%9F%E6%88%90PDF-Part2/"/>
    <id>http://keleyundou.github.io/2015/08/18/iOS开发之Quartz2D生成PDF-Part2/</id>
    <published>2015-08-18T12:40:31.000Z</published>
    <updated>2016-04-01T12:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节当中，我们创建了一个基于Quartz2D的PDF，并在PDF中添加一线条。<br>在这一节，主要是添加一个logo，和绘制一个table。</p>
<h3 id="添加logo"><a href="#添加logo" class="headerlink" title="添加logo"></a>添加logo</h3><p><a href="http://img.blog.csdn.net/20150818132734126" target="_blank" rel="external">下载图片资源</a>，然后添加到工程当中。</p>
<p>在<code>PDFRenderer.m</code>文件中添加下面方法：</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制图像</span></div><div class="line">+ (<span class="keyword">void</span>)drawImage:(<span class="built_in">UIImage</span>*)image inRect:(<span class="built_in">CGRect</span>)rect &#123;</div><div class="line">    [image drawInRect:rect];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>PDFRenderer.h</code>中添加下面方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawImage:(<span class="built_in">UIImage</span>*)image inRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line">+</div></pre></td></tr></table></figure>
<p>为了能在PDF上显示此logo，在<code>PDFRenderer.m</code>的<code>drawPDF</code>方法中添加下面代码，此代码写在<code>UIGraphicsEndPDFContext();</code>之前：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *logo = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"ray-logo"</span>];</div><div class="line"><span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">60</span>);</div><div class="line">[PDFRenderer drawImage:logo inRect:frame];</div></pre></td></tr></table></figure>
<p>在上面的代码中，创建一个UIImage对象，并定义图像的位置和大小，调用<code>drawImage</code>方法将两个参数传过去进行绘制。</p>
<p>完整代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawPDF:(<span class="built_in">NSString</span>*)fileName &#123;</div><div class="line">    <span class="built_in">UIGraphicsBeginPDFContextToFile</span>(fileName, <span class="built_in">CGRectZero</span>, <span class="literal">nil</span>);</div><div class="line">    <span class="built_in">UIGraphicsBeginPDFPageWithInfo</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">612</span>, <span class="number">792</span>), <span class="literal">nil</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGPoint</span> from = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">CGPoint</span> to = <span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">300</span>);</div><div class="line">    [PDFRenderer drawLineFromPoint:from toPoint:to];</div><div class="line"></div><div class="line">    <span class="built_in">UIImage</span> *logo = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"ray-logo"</span>];</div><div class="line">    <span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">60</span>);</div><div class="line">    [PDFRenderer drawImage:logo inRect:frame];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> drawText];</div><div class="line"></div><div class="line">    <span class="built_in">UIGraphicsEndPDFContext</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此了解到如何绘制清单的基本元素：文本、线条、图片。接下来将运用这些所有元素构建更为完美的布局。</p>
<h3 id="绘制Labels"><a href="#绘制Labels" class="headerlink" title="绘制Labels"></a>绘制Labels</h3><p>创建一个xib，并命名为<code>InvoiceView</code>，选中<code>InvoiceView</code>IB，设置View的width: 612 和height: 792，这些都是A4PDF的默认尺寸。下面拖拽8个UILabel，并按如下命名：</p>
<ul>
<li>Recipient [Name]</li>
<li>Recipient’s Address</li>
<li>Recipient’s City</li>
<li>Recipient’s Postal Code</li>
<li>Invoicer [Name]</li>
<li>Invoicer’s Address</li>
<li>Invoicer’s City</li>
<li>Invoicer’s Postal Code</li>
</ul>
<p align="center"><br><img src="http://img.blog.csdn.net/20150818133920616" width="693" height="293"><br></p>

<p>这些labels的位置将会在PDF上进行布局。给每个label从0-7设置tag。例如：<code>Recipient</code>的tag是0，<code>Recipient’s Address</code>的tag事1，以此类推。</p>
<p align="center"><br><img src="http://img.blog.csdn.net/20150818134657503" width="519" height="338" align="center"><br></p>

<p>打开<code>PDFRenderer.m</code>文件，并重构<code>drawText</code>方法。代码清单如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">void</span>)drawText:(<span class="built_in">NSString</span>*)textToDraw inFrame:(<span class="built_in">CGRect</span>)frameRect &#123;</div><div class="line">    <span class="built_in">CFStringRef</span> stringRef = (__bridge <span class="built_in">CFStringRef</span>)textToDraw;</div><div class="line">    <span class="built_in">CFAttributedStringRef</span> currentText = <span class="built_in">CFAttributedStringCreate</span>(<span class="literal">NULL</span>, stringRef, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CTFramesetterRef</span> framesetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>(currentText);</div><div class="line"></div><div class="line">    <span class="built_in">CGMutablePathRef</span> framePath = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathAddRect</span>(framePath, <span class="literal">NULL</span>, frameRect);</div><div class="line">    <span class="built_in">CFRange</span> currentRange = <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">CTFrameRef</span> frameRef = <span class="built_in">CTFramesetterCreateFrame</span>(framesetter, currentRange, framePath, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CGPathRelease</span>(framePath);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextRef</span> currentContext = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"></div><div class="line">    <span class="built_in">CGContextSetTextMatrix</span>(currentContext, <span class="built_in">CGAffineTransformIdentity</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(currentContext, <span class="number">0</span>,<span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(currentContext, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CTFrameDraw</span>(frameRef, currentContext);</div><div class="line"></div><div class="line">    <span class="built_in">CFRelease</span>(frameRef);</div><div class="line">    <span class="built_in">CFRelease</span>(stringRef);</div><div class="line">    <span class="built_in">CFRelease</span>(framesetter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>PDFRenderer.h</code>文件中添加下面代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">void</span>)drawText:(<span class="built_in">NSString</span>*)textToDraw inFrame:(<span class="built_in">CGRect</span>)frameRect</div></pre></td></tr></table></figure>
<p>下面是从<code>InvoiceView</code>中加载label，使用文本和位置大小来绘制到PDF上。在<code>PDFRenderer.m</code>中的<code>drawPDF</code>的商法添加一个新方法<code>drawLabels</code>:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawLabels &#123;</div><div class="line">    <span class="built_in">NSArray</span> *objects = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"InvoiceView"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">UIView</span> *mainView = [objects lastObject];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> [mainView subviews]) &#123;</div><div class="line">        <span class="keyword">if</span> ([view isKindOfClass:[<span class="built_in">UILabel</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="built_in">UILabel</span> *label = (<span class="built_in">UILabel</span>*)view;</div><div class="line">            [<span class="keyword">self</span> drawText:label.text inFrame:label.frame];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法是加载<code>InvoiceView</code>，遍历<code>InvoiceView</code>中的labels，调用<code>drawText</code>，将text和frame变量传递过去。</p>
<p>需改<code>drawPDF</code>方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawPDF:(<span class="built_in">NSString</span>*)fileName &#123;</div><div class="line">    <span class="built_in">UIGraphicsBeginPDFContextToFile</span>(fileName, <span class="built_in">CGRectZero</span>, <span class="literal">nil</span>);</div><div class="line">    <span class="built_in">UIGraphicsBeginPDFPageWithInfo</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">612</span>, <span class="number">792</span>), <span class="literal">nil</span>);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> drawText:<span class="string">@"Hello world"</span> inFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">50</span>)];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> drawLabels];</div><div class="line"><span class="comment">//    [self drawText];</span></div><div class="line"></div><div class="line">    <span class="built_in">UIGraphicsEndPDFContext</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行下模拟器：</p>
<p align="center"><br><img src="http://img.blog.csdn.net/20150818140954252" width="336" height="206"><br><br></p>

<p>啊哈，能运行出来，但结果不是令人满意，文字啥的都是反的。接下来就坐下处理，修改<code>drawText</code> 的代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGContextTranslateCTM</span>(currentContext, <span class="number">0</span>, frameRect.origin.y*<span class="number">2</span>);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(currentContext, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line"></div><div class="line">    <span class="built_in">CTFrameDraw</span>(frameRef, currentContext);</div><div class="line"></div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(currentContext, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(currentContext, <span class="number">0</span>, (<span class="number">-1.0</span>) * frameRect.origin.y * <span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>再次运行下模拟器，看下结果：</p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818141350370" width="372" height="244"></p>
<p>结果比较令人满意。</p>
<h3 id="添加logo-1"><a href="#添加logo-1" class="headerlink" title="添加logo"></a>添加logo</h3><p>打开<code>InvoiceView.xib</code> 添加一个<code>UIImageView</code></p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818141834653" width="371" height="222"></p>
<p>然后在<code>PDFRenderer.m</code> 中添加<code>drawLogo</code>方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawLogo &#123;</div><div class="line">    <span class="built_in">NSArray</span> *objects = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="string">@"InvoiceView"</span> owner:<span class="literal">nil</span> options:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">UIView</span> *mainView = [objects lastObject];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> [mainView subviews]) &#123;</div><div class="line">        <span class="keyword">if</span> ([view isKindOfClass:[<span class="built_in">UIImageView</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="built_in">UIImage</span> *logo = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"ray-logo"</span>];</div><div class="line">            [<span class="keyword">self</span> drawImage:logo inRect:view.frame];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理逻辑和<code>drawLabels</code> 方法类似。</p>
<p>最后在<code>drawPDF</code> 方法中的<code>[self drawLabels]</code> 语句后调用<code>[self drawLogo]</code> 。来看下运行效果：</p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818142209471" width="371" height="222"></p>
<h3 id="绘制一个表格"><a href="#绘制一个表格" class="headerlink" title="绘制一个表格"></a>绘制一个表格</h3><p>绘制表格不能像使用<code>InvoiceView</code> 那样，需要一系列的变量来替代，例如：table的width和height，row的height，column的width。</p>
<p>下面在<code>PDFRenderer.m</code> 的<code>drawPDF</code> 上方添加如下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawTableAt:(<span class="built_in">CGPoint</span>)origin</div><div class="line">      withRowHeight:(<span class="keyword">int</span>)rowHeight</div><div class="line">     andColumnWidth:(<span class="keyword">int</span>)columnWidth</div><div class="line">        andRowCount:(<span class="keyword">int</span>)numberOfRows</div><div class="line">     andColumnCount:(<span class="keyword">int</span>)numberOfColumns</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= numberOfRows; i++) &#123;</div><div class="line">        <span class="keyword">int</span> newOrigin = origin.y + (rowHeight * i);</div><div class="line"></div><div class="line">        <span class="built_in">CGPoint</span> from = <span class="built_in">CGPointMake</span>(origin.x, newOrigin);</div><div class="line">        <span class="built_in">CGPoint</span> to = <span class="built_in">CGPointMake</span>(origin.x + (numberOfColumns*columnWidth), newOrigin);</div><div class="line"></div><div class="line">        [<span class="keyword">self</span> drawLineFromPoint:from toPoint:to];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面方法是绘制水平线，循环遍历每一行，计算每行的起始和结束位置。最后调用<code>drawLine:from:to</code> 方法绘制水平线：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawPDF:(<span class="built_in">NSString</span>*)fileName &#123;</div><div class="line">    <span class="built_in">UIGraphicsBeginPDFContextToFile</span>(fileName, <span class="built_in">CGRectZero</span>, <span class="literal">nil</span>);</div><div class="line">    <span class="built_in">UIGraphicsBeginPDFPageWithInfo</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">612</span>, <span class="number">792</span>), <span class="literal">nil</span>);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> drawText:<span class="string">@"Hello world"</span> inFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">50</span>)];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> drawLabels];</div><div class="line">    [<span class="keyword">self</span> drawLogo];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> xOrigin = <span class="number">50</span>;</div><div class="line">    <span class="keyword">int</span> yOrigin = <span class="number">300</span>;</div><div class="line">    <span class="keyword">int</span> rowHeight = <span class="number">50</span>;</div><div class="line">    <span class="keyword">int</span> columnWidth = <span class="number">120</span>;</div><div class="line">    <span class="keyword">int</span> numberOfRows = <span class="number">7</span>;</div><div class="line">    <span class="keyword">int</span> numberOfColumns = <span class="number">4</span>;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> drawTableAt:<span class="built_in">CGPointMake</span>(xOrigin, yOrigin)</div><div class="line">        withRowHeight:rowHeight</div><div class="line">       andColumnWidth:columnWidth</div><div class="line">          andRowCount:numberOfRows</div><div class="line">       andColumnCount:numberOfColumns];</div><div class="line"></div><div class="line">    <span class="built_in">UIGraphicsEndPDFContext</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行模拟器，看下效果：</p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818144256313" width="371" height="565"></p>
<p>接下来是绘制垂直线条，在<code>drawTable</code> 方法中的第一个循环的下方再添加一个循环：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawTableAt:(<span class="built_in">CGPoint</span>)origin</div><div class="line">      withRowHeight:(<span class="keyword">int</span>)rowHeight</div><div class="line">     andColumnWidth:(<span class="keyword">int</span>)columnWidth</div><div class="line">        andRowCount:(<span class="keyword">int</span>)numberOfRows</div><div class="line">     andColumnCount:(<span class="keyword">int</span>)numberOfColumns</div><div class="line">&#123;</div><div class="line">    <span class="comment">//绘制水平线</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= numberOfRows; i++) &#123;</div><div class="line">        <span class="keyword">int</span> newOrigin = origin.y + (rowHeight * i);</div><div class="line"></div><div class="line">        <span class="built_in">CGPoint</span> from = <span class="built_in">CGPointMake</span>(origin.x, newOrigin);</div><div class="line">        <span class="built_in">CGPoint</span> to = <span class="built_in">CGPointMake</span>(origin.x + (numberOfColumns*columnWidth), newOrigin);</div><div class="line"></div><div class="line">        [<span class="keyword">self</span> drawLineFromPoint:from toPoint:to];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//绘制垂直线</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= numberOfColumns; i++) &#123;</div><div class="line">        <span class="keyword">int</span> newOrigin = origin.x + (columnWidth * i);</div><div class="line">        <span class="built_in">CGPoint</span> from = <span class="built_in">CGPointMake</span>(newOrigin, origin.y);</div><div class="line">        <span class="built_in">CGPoint</span> to = <span class="built_in">CGPointMake</span>(newOrigin, origin.y + (numberOfRows * rowHeight));</div><div class="line"></div><div class="line">        [<span class="keyword">self</span> drawLineFromPoint:from toPoint:to];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次运行下模拟器，看下效果：</p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818144927519" width="367" height="565"></p>
<p>看着似乎已完成，但还缺少一些数据填充到表格当中，那么接下来完成此过程，让此PDF近乎完美。</p>
<h3 id="填充表格"><a href="#填充表格" class="headerlink" title="填充表格"></a>填充表格</h3><p>模拟数据填充表格，在<code>PDFRenderer.m</code> 中的<code>drawPDF</code> 方法的上方添加 <code>drawTableDataAt</code> 方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawTableDataAt:(<span class="built_in">CGPoint</span>)origin</div><div class="line">          withRowHeight:(<span class="keyword">int</span>)rowHeight</div><div class="line">         andColumnWidth:(<span class="keyword">int</span>)columnWidth</div><div class="line">            andRowCount:(<span class="keyword">int</span>)numberOfRows</div><div class="line">         andColumnCount:(<span class="keyword">int</span>)numberOfColumns</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> *header = @[<span class="string">@"Quantity"</span>, <span class="string">@"Description"</span>, <span class="string">@"Unit price"</span>, <span class="string">@"Total"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo1 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo2 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo3 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo4 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *allInfo = @[header, invoiceInfo1, invoiceInfo2, invoiceInfo3, invoiceInfo4];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allInfo.count; i++) &#123;</div><div class="line">        <span class="built_in">NSArray</span> *infoToDraw = allInfo[i];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; numberOfColumns; j++) &#123;</div><div class="line">            <span class="keyword">int</span> newOriginX = origin.x + (columnWidth * j);</div><div class="line">            <span class="keyword">int</span> newOriginY = origin.y + (rowHeight * (i+<span class="number">1</span>));</div><div class="line"></div><div class="line">            <span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(newOriginX, newOriginY, columnWidth, rowHeight);</div><div class="line">            [<span class="keyword">self</span> drawText:infoToDraw[j] inFrame:frame];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一个数组是表头数据，其他数组是表中行和列的值。</p>
<p>在<code>drawPDF</code> 中调用<code>drawTableDataAt</code>（在<code>UIGraphicsEndPDFContext</code> 之前调用）：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span> drawTableDataAt:<span class="built_in">CGPointMake</span>(xOrigin, yOrigin)</div><div class="line">            withRowHeight:rowHeight</div><div class="line">           andColumnWidth:columnWidth</div><div class="line">              andRowCount:numberOfRows</div><div class="line">           andColumnCount:numberOfColumns];</div></pre></td></tr></table></figure>
<p>运行模拟器，将会看到表中填充的数据:</p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818160653841" width="368" height="566"></p>
<p>感觉还差点什么，再做最后一次调整：添加间距<code>padding</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)drawTableDataAt:(<span class="built_in">CGPoint</span>)origin</div><div class="line">          withRowHeight:(<span class="keyword">int</span>)rowHeight</div><div class="line">         andColumnWidth:(<span class="keyword">int</span>)columnWidth</div><div class="line">            andRowCount:(<span class="keyword">int</span>)numberOfRows</div><div class="line">         andColumnCount:(<span class="keyword">int</span>)numberOfColumns</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> padding = <span class="number">10</span>;</div><div class="line">    <span class="built_in">NSArray</span> *header = @[<span class="string">@"Quantity"</span>, <span class="string">@"Description"</span>, <span class="string">@"Unit price"</span>, <span class="string">@"Total"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo1 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo2 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo3 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *invoiceInfo4 = @[<span class="string">@"1"</span>, <span class="string">@"Development"</span>, <span class="string">@"$1000"</span>, <span class="string">@"1000"</span>];</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *allInfo = @[header, invoiceInfo1, invoiceInfo2, invoiceInfo3, invoiceInfo4];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allInfo.count; i++) &#123;</div><div class="line">        <span class="built_in">NSArray</span> *infoToDraw = allInfo[i];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; numberOfColumns; j++) &#123;</div><div class="line">            <span class="keyword">int</span> newOriginX = origin.x + (columnWidth * j);</div><div class="line">            <span class="keyword">int</span> newOriginY = origin.y + (rowHeight * (i+<span class="number">1</span>));</div><div class="line"></div><div class="line">            <span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(newOriginX+padding, newOriginY+padding, columnWidth, rowHeight);</div><div class="line">            [<span class="keyword">self</span> drawText:infoToDraw[j] inFrame:frame];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终结果：</p>
<p></p><p align="center"><br><img src="http://img.blog.csdn.net/20150818161451165" width="371" height="564"></p>
<p>大功告成，此PDF主要展示了图片、表格和数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节当中，我们创建了一个基于Quartz2D的PDF，并在PDF中添加一线条。&lt;br&gt;在这一节，主要是添加一个logo，和绘制一个table。&lt;/p&gt;
&lt;h3 id=&quot;添加logo&quot;&gt;&lt;a href=&quot;#添加logo&quot; class=&quot;headerlink&quot; title=&quot;添加logo&quot;&gt;&lt;/a&gt;添加logo&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://img.blog.csdn.net/20150818132734126&quot;&gt;下载图片资源&lt;/a&gt;，然后添加到工程当中。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;PDFRenderer.m&lt;/code&gt;文件中添加下面方法：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="Tutorial" scheme="http://keleyundou.github.io/tags/Tutorial/"/>
    
      <category term="PDF" scheme="http://keleyundou.github.io/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之Quartz2D生成PDF-Part1</title>
    <link href="http://keleyundou.github.io/2015/08/17/iOS%E5%BC%80%E5%8F%91%E4%B9%8BQuartz2D%E7%94%9F%E6%88%90PDF-Part1/"/>
    <id>http://keleyundou.github.io/2015/08/17/iOS开发之Quartz2D生成PDF-Part1/</id>
    <published>2015-08-17T12:15:25.000Z</published>
    <updated>2016-04-01T12:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用iOS的Quartz2D-生成PDF文件"><a href="#使用iOS的Quartz2D-生成PDF文件" class="headerlink" title="使用iOS的Quartz2D 生成PDF文件"></a>使用iOS的Quartz2D 生成PDF文件</h3><p>首先创建一个工程，导入CoreText.framework框架。在<code>PDFViewController.h</code>文件中引入CoreText文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;CoreText/CoreText.h&gt;</span></span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在<code>PDFViewController.m</code>文件中创建一个新方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawText</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span>* fileName = <span class="string">@"Invoice.PDF"</span>;</div><div class="line"> </div><div class="line">    <span class="built_in">NSArray</span> *arrayPaths =</div><div class="line">    <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(</div><div class="line">                                        <span class="built_in">NSDocumentDirectory</span>,</div><div class="line">                                        <span class="built_in">NSUserDomainMask</span>,</div><div class="line">                                        <span class="literal">YES</span>);</div><div class="line">    <span class="built_in">NSString</span> *path = [arrayPaths objectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSString</span>* pdfFileName = [path stringByAppendingPathComponent:fileName];</div><div class="line"> </div><div class="line">    <span class="built_in">NSString</span>* textToDraw = <span class="string">@"Hello World"</span>;</div><div class="line">    <span class="built_in">CFStringRef</span> stringRef = (__bridge <span class="built_in">CFStringRef</span>)textToDraw;</div><div class="line"> </div><div class="line">    <span class="comment">// 使用 Core Text Framesetter.</span></div><div class="line">    <span class="built_in">CFAttributedStringRef</span> currentText = <span class="built_in">CFAttributedStringCreate</span>(<span class="literal">NULL</span>, stringRef, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CTFramesetterRef</span> framesetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>(currentText);</div><div class="line"> </div><div class="line">    <span class="built_in">CGRect</span> frameRect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">50</span>);</div><div class="line">    <span class="built_in">CGMutablePathRef</span> framePath = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathAddRect</span>(framePath, <span class="literal">NULL</span>, frameRect);</div><div class="line"> </div><div class="line">    <span class="comment">// 获取将要被渲染的帧</span></div><div class="line">    <span class="built_in">CFRange</span> currentRange = <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">CTFrameRef</span> frameRef = <span class="built_in">CTFramesetterCreateFrame</span>(framesetter, currentRange, framePath, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">CGPathRelease</span>(framePath);</div><div class="line"> </div><div class="line">    <span class="comment">// 创建一个PDF的上下文，页面大小默认为 612 x 792</span></div><div class="line">    <span class="built_in">UIGraphicsBeginPDFContextToFile</span>(pdfFileName, <span class="built_in">CGRectZero</span>, <span class="literal">nil</span>);</div><div class="line"> </div><div class="line">    <span class="comment">// 标记新页面的开头</span></div><div class="line">    <span class="built_in">UIGraphicsBeginPDFPageWithInfo</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">612</span>, <span class="number">792</span>), <span class="literal">nil</span>);</div><div class="line"> </div><div class="line">    <span class="comment">// 获取上下文.</span></div><div class="line">    <span class="built_in">CGContextRef</span> currentContext = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"> </div><div class="line">    <span class="comment">// 把文字变成矩阵已知状态。这将确保没有旧缩放因子被留在原处。</span></div><div class="line">    <span class="built_in">CGContextSetTextMatrix</span>(currentContext, <span class="built_in">CGAffineTransformIdentity</span>);</div><div class="line"> </div><div class="line">    <span class="comment">//文本坐标翻转</span></div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(currentContext, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(currentContext, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line"> </div><div class="line">    <span class="comment">// 绘制帧</span></div><div class="line">    <span class="built_in">CTFrameDraw</span>(frameRef, currentContext);</div><div class="line"> </div><div class="line">    <span class="built_in">CFRelease</span>(frameRef);</div><div class="line">    <span class="built_in">CFRelease</span>(stringRef);</div><div class="line">    <span class="built_in">CFRelease</span>(framesetter);</div><div class="line"> </div><div class="line">	<span class="comment">//关闭PDF上下文</span></div><div class="line">    <span class="built_in">UIGraphicsEndPDFContext</span>();</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法有点长，在此分段解释下：</p>
<p>在沙盒目录下创建PDF文件，并命名为<code>Invoice.pdf</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span>* fileName = <span class="string">@"Invoice.PDF"</span>;</div><div class="line"> </div><div class="line"><span class="built_in">NSArray</span> *arrayPaths =</div><div class="line"><span class="built_in">NSSearchPathForDirectoriesInDomains</span>(</div><div class="line">                                    <span class="built_in">NSDocumentDirectory</span>,</div><div class="line">                                    <span class="built_in">NSUserDomainMask</span>,</div><div class="line">                                    <span class="literal">YES</span>);</div><div class="line"><span class="built_in">NSString</span> *path = [arrayPaths objectAtIndex:<span class="number">0</span>];</div><div class="line"><span class="built_in">NSString</span>* pdfFileName = [path stringByAppendingPathComponent:fileName];</div></pre></td></tr></table></figure>
<p>下面的代码块是创建一个已“Hello，world”为内容的PDF，将string转换为CFStringRef格式</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span>* textToDraw = <span class="string">@"Hello World"</span>;</div><div class="line"><span class="built_in">CFStringRef</span> stringRef = (__bridge <span class="built_in">CFStringRef</span>)textToDraw;</div><div class="line"> </div><div class="line"><span class="built_in">CFAttributedStringRef</span> currentText = <span class="built_in">CFAttributedStringCreate</span>(<span class="literal">NULL</span>, stringRef, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">CTFramesetterRef</span> framesetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>(currentText);</div></pre></td></tr></table></figure>
<p>然后是创建一个CGRect用于定义文本的大小</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> frameRect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">50</span>);</div><div class="line"><span class="built_in">CGMutablePathRef</span> framePath = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line"><span class="built_in">CGPathAddRect</span>(framePath, <span class="literal">NULL</span>, frameRect);</div><div class="line"> </div><div class="line"><span class="built_in">CFRange</span> currentRange = <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="built_in">CTFrameRef</span> frameRef = <span class="built_in">CTFramesetterCreateFrame</span>(framesetter, currentRange, framePath, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">CGPathRelease</span>(framePath);</div></pre></td></tr></table></figure>
<p>接下来，我们创建一个PDF上下文和标记的PDF的起始页。 PDF的每个页面都有开始并调用UIGraphicsBeginPDFPageWithInfo 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIGraphicsBeginPDFContextToFile</span>(pdfFileName, <span class="built_in">CGRectZero</span>, <span class="literal">nil</span>);</div><div class="line"> </div><div class="line"><span class="built_in">UIGraphicsBeginPDFPageWithInfo</span>(<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">612</span>, <span class="number">792</span>), <span class="literal">nil</span>);</div><div class="line"> </div><div class="line"><span class="built_in">CGContextRef</span> currentContext = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div></pre></td></tr></table></figure>
<p>由于Core Graphics 的坐标是从左下角开始，而UIKit的坐标是从左上角开始，所以需做一个变换：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGContextSetTextMatrix</span>(currentContext, <span class="built_in">CGAffineTransformIdentity</span>);</div><div class="line"> </div><div class="line"><span class="built_in">CGContextTranslateCTM</span>(currentContext, <span class="number">0</span>, <span class="number">100</span>);</div><div class="line"><span class="built_in">CGContextScaleCTM</span>(currentContext, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div></pre></td></tr></table></figure>
<p>我们绘制文本实际帧，释放Core Graphics对象，并关闭PDF上下文至此PDF写入到沙盒目录下。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CTFrameDraw</span>(frameRef, currentContext);</div><div class="line"> </div><div class="line"><span class="built_in">CFRelease</span>(frameRef);</div><div class="line"><span class="built_in">CFRelease</span>(stringRef);</div><div class="line"><span class="built_in">CFRelease</span>(framesetter);</div><div class="line"> </div><div class="line"><span class="built_in">UIGraphicsEndPDFContext</span>();</div></pre></td></tr></table></figure>
<h3 id="使用UIWebView展示PDF文件"><a href="#使用UIWebView展示PDF文件" class="headerlink" title="使用UIWebView展示PDF文件"></a>使用UIWebView展示PDF文件</h3><p>在<code>PDFViewController.m</code>中的<code>drawText</code>方法后添加下面方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)showPDFFile</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span>* fileName = <span class="string">@"Invoice.PDF"</span>;</div><div class="line"> </div><div class="line">    <span class="built_in">NSArray</span> *arrayPaths =</div><div class="line">    <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(</div><div class="line">                                        <span class="built_in">NSDocumentDirectory</span>,</div><div class="line">                                        <span class="built_in">NSUserDomainMask</span>,</div><div class="line">                                        <span class="literal">YES</span>);</div><div class="line">    <span class="built_in">NSString</span> *path = [arrayPaths objectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSString</span>* pdfFileName = [path stringByAppendingPathComponent:fileName];</div><div class="line"> </div><div class="line">    <span class="built_in">UIWebView</span>* webView = [[<span class="built_in">UIWebView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="number">480</span>)];</div><div class="line"> </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:pdfFileName];</div><div class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</div><div class="line">    [webView setScalesPageToFit:<span class="literal">YES</span>];</div><div class="line">    [webView loadRequest:request];</div><div class="line"> </div><div class="line">    [<span class="keyword">self</span>.view addSubview:webView];    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>viewDidLoad</code>中添加</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> drawText];</div><div class="line">    [<span class="keyword">self</span> showPDFFile];</div><div class="line"> </div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用iOS的Quartz2D-生成PDF文件&quot;&gt;&lt;a href=&quot;#使用iOS的Quartz2D-生成PDF文件&quot; class=&quot;headerlink&quot; title=&quot;使用iOS的Quartz2D 生成PDF文件&quot;&gt;&lt;/a&gt;使用iOS的Quartz2D 生成PDF文件&lt;/h3&gt;&lt;p&gt;首先创建一个工程，导入CoreText.framework框架。在&lt;code&gt;PDFViewController.h&lt;/code&gt;文件中引入CoreText文件&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;CoreText/CoreText.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
      <category term="Tutorial" scheme="http://keleyundou.github.io/tags/Tutorial/"/>
    
      <category term="PDF" scheme="http://keleyundou.github.io/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>assign、copy、retain等关键字的含义</title>
    <link href="http://keleyundou.github.io/2015/04/21/2015-04-21-assign,-copy,-retaindeng-guan-jian-zi-de-han-yi/"/>
    <id>http://keleyundou.github.io/2015/04/21/2015-04-21-assign,-copy,-retaindeng-guan-jian-zi-de-han-yi/</id>
    <published>2015-04-21T06:06:31.000Z</published>
    <updated>2016-03-26T06:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>assign:简单赋值，不更改索引计数</p>
<p>copy:建立一个索引计数为1的对象，然后释放旧对象</p>
<p>retain:释放就对象，将旧对象的值赋予输入对象，再将输入对象的索引计数加1</p>
<p>copy 其实就是建立了一个相同的对象，而retain不是：</p>
<p>比如，一个NSString对象，地址为0x1111，内容为@”Hello，world！”；copy到另一个NSString对象之后，地址为0x2222，内容相同，新的对象retain为1，旧的对象索引计数没用变化。</p>
<p>retain到另一个NSString对象之后，地址相同（建立一个指针，指针拷贝），内容相同，这个对象的retain值+1</p>
<p>也就是说，retain是指针拷贝，而copy是内容拷贝。拷贝之前都会将旧的对象给释放掉。<br><a id="more"></a></p>
<h3 id="使用范围："><a href="#使用范围：" class="headerlink" title="使用范围："></a>使用范围：</h3><p>*assign的使用：一般对应于基础数据类型（NSInteger）和C数据类型（int, float, double, char 等）</p>
<p>*copy的使用：一般对应于NSString</p>
<p>*retain的使用：一般对应于NSObject和其他子类</p>
<p>1.readonly：表示这个属性是只读的，就是只生成getter方法不会生成setter方法；</p>
<p>2.readwrite：设置可供访问级别；</p>
<p>3.retain：旨在说明该属性在赋值的时候，先release掉之前的值，然后再赋新值给属性，引用计数再+1；</p>
<p>4.nonatomic：非原子性访问，不加同步，多线程并发访问会提高性能。注意：如果不加此属性，则默认是两个访问方法都为原子型事务访问。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1.假设用malloc分配了一个块内存，并把它的地址赋值给了指针a，然后你希望指针b也共享这块内存，于是你又把a赋值给（assign）了b。至此a和b就指向了同一块内存，请问当a不再需要这块内存是，能否直接释放掉？答案为No！是的，因为a并不知道b是否还在使用这块内存，如果a释放了，那么b在使用这块内存的时候会引起程序crash。</p>
<p>2.了解到1中assign的问题后，那么问题来了，该如何解决呢？最简单的一个方法就是：使用引用计数。还是上面那个问题，我们给那块内存设一个内存引用计数，当内存被分配并且赋值给a时，引用计数是1。当a赋值给b时，引用计数增加到2，这时如果a不再使用这块内存，它只需把引用计数减1，表明自己不再拥有这块内存，b不再使用这块内存时也把引用计数减1，当引用计数变为0时，代表该内存不再被任何指针所引用，系统可以把它直接释放掉。</p>
<p>3.上面两点其实就是assign和retain的区别，assign就是直接赋值，从而会引起1中的问题。当数据为int, float,等原生类型时，可以使用assign。retain就如2中所述，使用了引用计数，retain引起引用计数+1，release引起引用计数-1，当引用计数为0时，dealloc函数将会被调用，内存被回收。</p>
<p>4.copy是在你不希望a和b共享同一块内存是使用到。a和b各自有各自的内存。</p>
<p>5.atomic 和 nonatomic用来决定编译器生成的getter和setter是否为原子操作。在多线程环境下，原子操作是必要的，否则有可能引起错误的结果。加了atomic后, setter函数会变成这样：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (property != newValue) &#123;</div><div class="line">	[property release];</div><div class="line">	property = [newValue <span class="keyword">retain</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      assign、copy、retain等关键字的含义
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>多台电脑写博客之博客克隆</title>
    <link href="http://keleyundou.github.io/2015/04/01/2015-04-01-duo-tai-dian-nao-xie-bo-ke-zhi-bo-ke-ke-long/"/>
    <id>http://keleyundou.github.io/2015/04/01/2015-04-01-duo-tai-dian-nao-xie-bo-ke-zhi-bo-ke-ke-long/</id>
    <published>2015-04-01T10:23:10.000Z</published>
    <updated>2016-03-26T04:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个本地的Octopress仓库"><a href="#创建一个本地的Octopress仓库" class="headerlink" title="创建一个本地的Octopress仓库"></a>创建一个本地的Octopress仓库</h2><p>重新创建一个本地的Octopress仓库只需执行以下几步骤即可。</p>
<h3 id="拉取Octopress仓库内容"><a href="#拉取Octopress仓库内容" class="headerlink" title="拉取Octopress仓库内容"></a>拉取Octopress仓库内容</h3><p>首先克隆自己的Octopress仓库，初始化git仓库，添加远程仓库，也就是你自己的Octopress地址，pull到远程仓库。在终端执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir Octopress</div><div class="line">cd Octopress</div><div class="line">git init</div><div class="line">git remote add origin git@github.com:username/username.github.com.git</div><div class="line">git pull origin</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="切换到source分支"><a href="#切换到source分支" class="headerlink" title="切换到source分支"></a>切换到source分支</h3><p>这时候进入Octopress目录，发现除了初始化生成的.git目录外什么都没有。执行如下命令后source分支的东西就都出来的了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout source</div></pre></td></tr></table></figure>
<h3 id="建立github-pages"><a href="#建立github-pages" class="headerlink" title="建立github pages"></a>建立github pages</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rake setup_github_pages</div></pre></td></tr></table></figure>
<h3 id="拉取master分支"><a href="#拉取master分支" class="headerlink" title="拉取master分支"></a>拉取master分支</h3><p>进入_deploy目录，运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<h3 id="切换回source分支"><a href="#切换回source分支" class="headerlink" title="切换回source分支"></a>切换回source分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout source</div></pre></td></tr></table></figure>
<p>至此，Octopress就在另一台电脑上克隆好了，你就可以在不同的电脑上维护同一个博客了，运行一下如下命令，确认没有问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rake generate</div><div class="line">rake preview</div><div class="line">rake deploy</div></pre></td></tr></table></figure>
<h3 id="更新和推送"><a href="#更新和推送" class="headerlink" title="更新和推送"></a>更新和推送</h3><p>当你要在一台电脑上写博客或更改时，首先更新source仓库。更新master并不是必须的，因为你更改源文件之后还是需要rake generate的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd Octopress</div><div class="line">git pull origin source</div><div class="line">cd _deploy</div><div class="line">git pull origin master</div></pre></td></tr></table></figure>
<p>写完博客之后不要忘了推送到remote，下面的命令在每次处理完博客事务后记得要运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rake generate</div><div class="line">git add .</div><div class="line">git commit –m &quot;commit message&quot;</div><div class="line">git push origin source</div><div class="line">rake deploy</div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>当你换了一台新电脑之后，需要重新签名，签名请参考<a href="http://https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">generating-ssh-keys</a></p>
]]></content>
    
    <summary type="html">
    
      多台电脑写博客之博客克隆
    
    </summary>
    
      <category term="琐碎杂记" scheme="http://keleyundou.github.io/categories/%E7%90%90%E7%A2%8E%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Xib自定义UIView并在Storyboard中使用AutoLayout</title>
    <link href="http://keleyundou.github.io/2015/03/20/2015-03-20-shi-yong-xibzi-ding-yi-uiviewbing-zai-storyboardzhong-shi-yong-autolayout/"/>
    <id>http://keleyundou.github.io/2015/03/20/2015-03-20-shi-yong-xibzi-ding-yi-uiviewbing-zai-storyboardzhong-shi-yong-autolayout/</id>
    <published>2015-03-20T13:47:56.000Z</published>
    <updated>2016-03-26T06:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xib和Storyboard的使用我就不多叙述。关于如何用Xib自定义一个UIView，并将其添加在ViewController上，使用AutoLayout添加约束条件，使其跟随控制器ViewController的约束条件变化而变化呢？请看下文。</p>
<p> 1、 创建一个继承UIView的子类TestView和xib文件</p>
<p> <img src="http://img.blog.csdn.net/20150320213205724" alt="" width="640"></p>
<p> 2、 选中xib中的File’s Owner，设置右边工具栏中的Custom Class为你所创建的文件TesView<br> 3、 在TestView.h中添加一个IBOutlet属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *view;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p> 4、 将此IBOutlet 连接到TestView.xib 的View</p>
<p><img src="http://img.blog.csdn.net/20150320213447559" alt="" width="640" height="200"></p>
<p> 5、在TestCustomView.m文件中初始化，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:aDecoder];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *className = <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]);</div><div class="line">        <span class="keyword">self</span>.view = [[[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:className owner:<span class="keyword">self</span> options:<span class="literal">nil</span>] firstObject];</div><div class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.view];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者在awakeFromNib中添加也可以：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [[[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) owner:<span class="keyword">self</span> options:<span class="literal">nil</span>] firstObject];</div><div class="line">    [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.view];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6、在Storyboard中引用xib文件</p>
<p><img src="http://img.blog.csdn.net/20150320213639439" alt="" width="640"></p>
]]></content>
    
    <summary type="html">
    
      使用Xib自定义UIView并在Storyboard中使用AutoLayout
    
    </summary>
    
      <category term="iOS" scheme="http://keleyundou.github.io/categories/iOS/"/>
    
    
  </entry>
  
</feed>
